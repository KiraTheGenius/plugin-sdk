// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: serviceConnection/serviceConnection.proto

package serviceConnection

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnectionServiceClient is the client API for ConnectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectionServiceClient interface {
	Create(ctx context.Context, in *ConnectionsMessage, opts ...grpc.CallOption) (*ConnectionsMessage, error)
	Get(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*ConnectionsMessage, error)
	GetConnectionsIdList(ctx context.Context, in *IdsMessage, opts ...grpc.CallOption) (*IdsMessage, error)
	Delete(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*IdMessage, error)
	List(ctx context.Context, in *ListConnectionRequest, opts ...grpc.CallOption) (*ListConnectionResponse, error)
	Update(ctx context.Context, in *ConnectionsMessage, opts ...grpc.CallOption) (*ConnectionsMessage, error)
	GetWithJWT(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*ConnectionsMessage, error)
}

type connectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectionServiceClient(cc grpc.ClientConnInterface) ConnectionServiceClient {
	return &connectionServiceClient{cc}
}

func (c *connectionServiceClient) Create(ctx context.Context, in *ConnectionsMessage, opts ...grpc.CallOption) (*ConnectionsMessage, error) {
	out := new(ConnectionsMessage)
	err := c.cc.Invoke(ctx, "/serviceConnection.ConnectionService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) Get(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*ConnectionsMessage, error) {
	out := new(ConnectionsMessage)
	err := c.cc.Invoke(ctx, "/serviceConnection.ConnectionService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) GetConnectionsIdList(ctx context.Context, in *IdsMessage, opts ...grpc.CallOption) (*IdsMessage, error) {
	out := new(IdsMessage)
	err := c.cc.Invoke(ctx, "/serviceConnection.ConnectionService/GetConnectionsIdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) Delete(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*IdMessage, error) {
	out := new(IdMessage)
	err := c.cc.Invoke(ctx, "/serviceConnection.ConnectionService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) List(ctx context.Context, in *ListConnectionRequest, opts ...grpc.CallOption) (*ListConnectionResponse, error) {
	out := new(ListConnectionResponse)
	err := c.cc.Invoke(ctx, "/serviceConnection.ConnectionService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) Update(ctx context.Context, in *ConnectionsMessage, opts ...grpc.CallOption) (*ConnectionsMessage, error) {
	out := new(ConnectionsMessage)
	err := c.cc.Invoke(ctx, "/serviceConnection.ConnectionService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) GetWithJWT(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*ConnectionsMessage, error) {
	out := new(ConnectionsMessage)
	err := c.cc.Invoke(ctx, "/serviceConnection.ConnectionService/GetWithJWT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectionServiceServer is the server API for ConnectionService service.
// All implementations must embed UnimplementedConnectionServiceServer
// for forward compatibility
type ConnectionServiceServer interface {
	Create(context.Context, *ConnectionsMessage) (*ConnectionsMessage, error)
	Get(context.Context, *IdMessage) (*ConnectionsMessage, error)
	GetConnectionsIdList(context.Context, *IdsMessage) (*IdsMessage, error)
	Delete(context.Context, *IdMessage) (*IdMessage, error)
	List(context.Context, *ListConnectionRequest) (*ListConnectionResponse, error)
	Update(context.Context, *ConnectionsMessage) (*ConnectionsMessage, error)
	GetWithJWT(context.Context, *IdMessage) (*ConnectionsMessage, error)
	mustEmbedUnimplementedConnectionServiceServer()
}

// UnimplementedConnectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConnectionServiceServer struct {
}

func (UnimplementedConnectionServiceServer) Create(context.Context, *ConnectionsMessage) (*ConnectionsMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedConnectionServiceServer) Get(context.Context, *IdMessage) (*ConnectionsMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedConnectionServiceServer) GetConnectionsIdList(context.Context, *IdsMessage) (*IdsMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionsIdList not implemented")
}
func (UnimplementedConnectionServiceServer) Delete(context.Context, *IdMessage) (*IdMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedConnectionServiceServer) List(context.Context, *ListConnectionRequest) (*ListConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedConnectionServiceServer) Update(context.Context, *ConnectionsMessage) (*ConnectionsMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedConnectionServiceServer) GetWithJWT(context.Context, *IdMessage) (*ConnectionsMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithJWT not implemented")
}
func (UnimplementedConnectionServiceServer) mustEmbedUnimplementedConnectionServiceServer() {}

// UnsafeConnectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectionServiceServer will
// result in compilation errors.
type UnsafeConnectionServiceServer interface {
	mustEmbedUnimplementedConnectionServiceServer()
}

func RegisterConnectionServiceServer(s grpc.ServiceRegistrar, srv ConnectionServiceServer) {
	s.RegisterService(&ConnectionService_ServiceDesc, srv)
}

func _ConnectionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionsMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceConnection.ConnectionService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).Create(ctx, req.(*ConnectionsMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceConnection.ConnectionService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).Get(ctx, req.(*IdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_GetConnectionsIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdsMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).GetConnectionsIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceConnection.ConnectionService/GetConnectionsIdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).GetConnectionsIdList(ctx, req.(*IdsMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceConnection.ConnectionService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).Delete(ctx, req.(*IdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceConnection.ConnectionService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).List(ctx, req.(*ListConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionsMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceConnection.ConnectionService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).Update(ctx, req.(*ConnectionsMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_GetWithJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).GetWithJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceConnection.ConnectionService/GetWithJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).GetWithJWT(ctx, req.(*IdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectionService_ServiceDesc is the grpc.ServiceDesc for ConnectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "serviceConnection.ConnectionService",
	HandlerType: (*ConnectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ConnectionService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ConnectionService_Get_Handler,
		},
		{
			MethodName: "GetConnectionsIdList",
			Handler:    _ConnectionService_GetConnectionsIdList_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ConnectionService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ConnectionService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ConnectionService_Update_Handler,
		},
		{
			MethodName: "GetWithJWT",
			Handler:    _ConnectionService_GetWithJWT_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serviceConnection/serviceConnection.proto",
}
