// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: monitoring/monitoring.proto

package monitoring

import (
	_ "github.com/MyWeHub/plugin-sdk/gen/pluginrunner"
	_ "github.com/amsokol/protoc-gen-gotag/tagger"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_STATUS_NONE Status = 0 // should not be used, just a workaround for protojson pkg removing zero values
	Status_SUCCESS     Status = 1
	Status_ERROR       Status = 2
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "STATUS_NONE",
		1: "SUCCESS",
		2: "ERROR",
	}
	Status_value = map[string]int32{
		"STATUS_NONE": 0,
		"SUCCESS":     1,
		"ERROR":       2,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_monitoring_monitoring_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_monitoring_monitoring_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_monitoring_monitoring_proto_rawDescGZIP(), []int{0}
}

type ResourceType int32

const (
	ResourceType_RESOURCE_TYPE_NONE ResourceType = 0 // should not be used, just a workaround for protojson pkg removing zero values
	ResourceType_NodeLogs           ResourceType = 1
	ResourceType_WorkflowLogs       ResourceType = 2 // for later...
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "RESOURCE_TYPE_NONE",
		1: "NodeLogs",
		2: "WorkflowLogs",
	}
	ResourceType_value = map[string]int32{
		"RESOURCE_TYPE_NONE": 0,
		"NodeLogs":           1,
		"WorkflowLogs":       2,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_monitoring_monitoring_proto_enumTypes[1].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_monitoring_monitoring_proto_enumTypes[1]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_monitoring_monitoring_proto_rawDescGZIP(), []int{1}
}

type Duration int32

const (
	Duration_LAST_15_MIN   Duration = 0
	Duration_LAST_30_MIN   Duration = 1
	Duration_LAST_HOUR     Duration = 2
	Duration_LAST_24_HOURS Duration = 3
	Duration_LAST_3_DAYS   Duration = 4
	Duration_LAST_7_DAYS   Duration = 5
	Duration_CUSTOM        Duration = 6
)

// Enum value maps for Duration.
var (
	Duration_name = map[int32]string{
		0: "LAST_15_MIN",
		1: "LAST_30_MIN",
		2: "LAST_HOUR",
		3: "LAST_24_HOURS",
		4: "LAST_3_DAYS",
		5: "LAST_7_DAYS",
		6: "CUSTOM",
	}
	Duration_value = map[string]int32{
		"LAST_15_MIN":   0,
		"LAST_30_MIN":   1,
		"LAST_HOUR":     2,
		"LAST_24_HOURS": 3,
		"LAST_3_DAYS":   4,
		"LAST_7_DAYS":   5,
		"CUSTOM":        6,
	}
)

func (x Duration) Enum() *Duration {
	p := new(Duration)
	*p = x
	return p
}

func (x Duration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Duration) Descriptor() protoreflect.EnumDescriptor {
	return file_monitoring_monitoring_proto_enumTypes[2].Descriptor()
}

func (Duration) Type() protoreflect.EnumType {
	return &file_monitoring_monitoring_proto_enumTypes[2]
}

func (x Duration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Duration.Descriptor instead.
func (Duration) EnumDescriptor() ([]byte, []int) {
	return file_monitoring_monitoring_proto_rawDescGZIP(), []int{2}
}

type GetNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                string `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id"`
	WorkflowVersionID string `protobuf:"bytes,2,opt,name=WorkflowVersionID,json=workflowVersionID,proto3" json:"workflowVersionID"`
}

func (x *GetNodeReq) Reset() {
	*x = GetNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_monitoring_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeReq) ProtoMessage() {}

func (x *GetNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_monitoring_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeReq.ProtoReflect.Descriptor instead.
func (*GetNodeReq) Descriptor() ([]byte, []int) {
	return file_monitoring_monitoring_proto_rawDescGZIP(), []int{0}
}

func (x *GetNodeReq) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GetNodeReq) GetWorkflowVersionID() string {
	if x != nil {
		return x.WorkflowVersionID
	}
	return ""
}

type ListRunsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string    RunID               = 1 [(tagger.tags) = "json:\"runID\"",              json_name = "runID"];
	WorkflowVersionID string `protobuf:"bytes,1,opt,name=WorkflowVersionID,json=workflowVersionID,proto3" json:"workflowVersionID"` //string    ClientID            = 2 [(tagger.tags) = "json:\"clientID\"",           json_name = "clientID"];
}

func (x *ListRunsReq) Reset() {
	*x = ListRunsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_monitoring_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRunsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunsReq) ProtoMessage() {}

func (x *ListRunsReq) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_monitoring_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunsReq.ProtoReflect.Descriptor instead.
func (*ListRunsReq) Descriptor() ([]byte, []int) {
	return file_monitoring_monitoring_proto_rawDescGZIP(), []int{1}
}

func (x *ListRunsReq) GetWorkflowVersionID() string {
	if x != nil {
		return x.WorkflowVersionID
	}
	return ""
}

type GetRunReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunID             string `protobuf:"bytes,1,opt,name=RunID,json=runID,proto3" json:"runID"`
	WorkflowVersionID string `protobuf:"bytes,2,opt,name=WorkflowVersionID,json=workflowVersionID,proto3" json:"workflowVersionID"` //string    ClientID            = 3 [(tagger.tags) = "json:\"clientID\"",           json_name = "clientID"];
}

func (x *GetRunReq) Reset() {
	*x = GetRunReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_monitoring_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRunReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunReq) ProtoMessage() {}

func (x *GetRunReq) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_monitoring_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunReq.ProtoReflect.Descriptor instead.
func (*GetRunReq) Descriptor() ([]byte, []int) {
	return file_monitoring_monitoring_proto_rawDescGZIP(), []int{2}
}

func (x *GetRunReq) GetRunID() string {
	if x != nil {
		return x.RunID
	}
	return ""
}

func (x *GetRunReq) GetWorkflowVersionID() string {
	if x != nil {
		return x.WorkflowVersionID
	}
	return ""
}

type GetRunRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeRecords []*NodeRecord `protobuf:"bytes,1,rep,name=nodeRecords,proto3" json:"nodeRecords,omitempty"`
}

func (x *GetRunRes) Reset() {
	*x = GetRunRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_monitoring_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRunRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunRes) ProtoMessage() {}

func (x *GetRunRes) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_monitoring_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunRes.ProtoReflect.Descriptor instead.
func (*GetRunRes) Descriptor() ([]byte, []int) {
	return file_monitoring_monitoring_proto_rawDescGZIP(), []int{3}
}

func (x *GetRunRes) GetNodeRecords() []*NodeRecord {
	if x != nil {
		return x.NodeRecords
	}
	return nil
}

type GetChartRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels   []string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	Fails    []int32  `protobuf:"varint,2,rep,packed,name=fails,proto3" json:"fails,omitempty"`
	Succeeds []int32  `protobuf:"varint,3,rep,packed,name=succeeds,proto3" json:"succeeds,omitempty"`
}

func (x *GetChartRes) Reset() {
	*x = GetChartRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_monitoring_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChartRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChartRes) ProtoMessage() {}

func (x *GetChartRes) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_monitoring_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChartRes.ProtoReflect.Descriptor instead.
func (*GetChartRes) Descriptor() ([]byte, []int) {
	return file_monitoring_monitoring_proto_rawDescGZIP(), []int{4}
}

func (x *GetChartRes) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetChartRes) GetFails() []int32 {
	if x != nil {
		return x.Fails
	}
	return nil
}

func (x *GetChartRes) GetSucceeds() []int32 {
	if x != nil {
		return x.Succeeds
	}
	return nil
}

type InsertNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunID             string           `protobuf:"bytes,1,opt,name=RunID,json=runID,proto3" json:"runID"` // partitionKey
	ClientID          string           `protobuf:"bytes,2,opt,name=ClientID,json=clientID,proto3" json:"clientID"`
	WorkflowVersionID string           `protobuf:"bytes,3,opt,name=WorkflowVersionID,json=workflowVersionID,proto3" json:"workflowVersionID"`
	NodeID            string           `protobuf:"bytes,4,opt,name=NodeID,json=nodeID,proto3" json:"nodeID"`
	NodeType          string           `protobuf:"bytes,5,opt,name=NodeType,json=nodeType,proto3" json:"nodeType"`
	NodeLabel         string           `protobuf:"bytes,6,opt,name=NodeLabel,json=nodeLabel,proto3" json:"nodeLabel"`
	Inputs            *structpb.Struct `protobuf:"bytes,7,opt,name=Inputs,json=inputs,proto3" json:"inputs"`
	Outputs           *structpb.Struct `protobuf:"bytes,8,opt,name=Outputs,json=outputs,proto3" json:"outputs"`
	Error             string           `protobuf:"bytes,9,opt,name=Error,json=error,proto3" json:"error"`
	Status            Status           `protobuf:"varint,10,opt,name=Status,json=status,proto3,enum=monitoring.Status" json:"status"`
}

func (x *InsertNodeReq) Reset() {
	*x = InsertNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_monitoring_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertNodeReq) ProtoMessage() {}

func (x *InsertNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_monitoring_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertNodeReq.ProtoReflect.Descriptor instead.
func (*InsertNodeReq) Descriptor() ([]byte, []int) {
	return file_monitoring_monitoring_proto_rawDescGZIP(), []int{5}
}

func (x *InsertNodeReq) GetRunID() string {
	if x != nil {
		return x.RunID
	}
	return ""
}

func (x *InsertNodeReq) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *InsertNodeReq) GetWorkflowVersionID() string {
	if x != nil {
		return x.WorkflowVersionID
	}
	return ""
}

func (x *InsertNodeReq) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *InsertNodeReq) GetNodeType() string {
	if x != nil {
		return x.NodeType
	}
	return ""
}

func (x *InsertNodeReq) GetNodeLabel() string {
	if x != nil {
		return x.NodeLabel
	}
	return ""
}

func (x *InsertNodeReq) GetInputs() *structpb.Struct {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *InsertNodeReq) GetOutputs() *structpb.Struct {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *InsertNodeReq) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *InsertNodeReq) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_NONE
}

type NodeRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                string                 `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id"` // 1 projection
	RunID             string                 `protobuf:"bytes,2,opt,name=RunID,json=runID,proto3" json:"runID"`
	ClientID          string                 `protobuf:"bytes,3,opt,name=ClientID,json=clientID,proto3" json:"clientID"`                            // 1 projection
	WorkflowVersionID string                 `protobuf:"bytes,4,opt,name=WorkflowVersionID,json=workflowVersionID,proto3" json:"workflowVersionID"` // 1 projection
	NodeID            string                 `protobuf:"bytes,5,opt,name=NodeID,json=nodeID,proto3" json:"nodeID"`
	NodeType          string                 `protobuf:"bytes,6,opt,name=NodeType,json=nodeType,proto3" json:"nodeType"`
	NodeLabel         string                 `protobuf:"bytes,7,opt,name=NodeLabel,json=nodeLabel,proto3" json:"nodeLabel"`
	Inputs            []byte                 `protobuf:"bytes,8,opt,name=Inputs,json=inputs,proto3" json:"inputs"`
	Outputs           []byte                 `protobuf:"bytes,9,opt,name=Outputs,json=outputs,proto3" json:"outputs"`
	Error             string                 `protobuf:"bytes,10,opt,name=Error,json=error,proto3" json:"error"`
	CreateTime        *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=CreateTime,json=createTime,proto3" json:"createTime"` // 1 projection
	UpdateTime        *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=UpdateTime,json=updateTime,proto3" json:"updateTime"`
	Status            Status                 `protobuf:"varint,13,opt,name=Status,json=status,proto3,enum=monitoring.Status" json:"status"` // 1 projection
	PartitionKey      string                 `protobuf:"bytes,14,opt,name=PartitionKey,json=partitionKey,proto3" json:"partitionKey"`       // 1 projection
	ResourceType      ResourceType           `protobuf:"varint,15,opt,name=ResourceType,json=resourceType,proto3,enum=monitoring.ResourceType" json:"resourceType"`
	XRid              string                 `protobuf:"bytes,16,opt,name=_rid,proto3" json:"_rid"`
	XSelf             string                 `protobuf:"bytes,17,opt,name=_self,proto3" json:"_self"`
	XEtag             string                 `protobuf:"bytes,18,opt,name=_etag,proto3" json:"_etag"`
	XAttachments      string                 `protobuf:"bytes,19,opt,name=_attachments,proto3" json:"_attachments"`
	XTs               int32                  `protobuf:"varint,20,opt,name=_ts,proto3" json:"_ts"`
}

func (x *NodeRecord) Reset() {
	*x = NodeRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_monitoring_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRecord) ProtoMessage() {}

func (x *NodeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_monitoring_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRecord.ProtoReflect.Descriptor instead.
func (*NodeRecord) Descriptor() ([]byte, []int) {
	return file_monitoring_monitoring_proto_rawDescGZIP(), []int{6}
}

func (x *NodeRecord) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *NodeRecord) GetRunID() string {
	if x != nil {
		return x.RunID
	}
	return ""
}

func (x *NodeRecord) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *NodeRecord) GetWorkflowVersionID() string {
	if x != nil {
		return x.WorkflowVersionID
	}
	return ""
}

func (x *NodeRecord) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *NodeRecord) GetNodeType() string {
	if x != nil {
		return x.NodeType
	}
	return ""
}

func (x *NodeRecord) GetNodeLabel() string {
	if x != nil {
		return x.NodeLabel
	}
	return ""
}

func (x *NodeRecord) GetInputs() []byte {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *NodeRecord) GetOutputs() []byte {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *NodeRecord) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *NodeRecord) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *NodeRecord) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *NodeRecord) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_NONE
}

func (x *NodeRecord) GetPartitionKey() string {
	if x != nil {
		return x.PartitionKey
	}
	return ""
}

func (x *NodeRecord) GetResourceType() ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return ResourceType_RESOURCE_TYPE_NONE
}

func (x *NodeRecord) GetXRid() string {
	if x != nil {
		return x.XRid
	}
	return ""
}

func (x *NodeRecord) GetXSelf() string {
	if x != nil {
		return x.XSelf
	}
	return ""
}

func (x *NodeRecord) GetXEtag() string {
	if x != nil {
		return x.XEtag
	}
	return ""
}

func (x *NodeRecord) GetXAttachments() string {
	if x != nil {
		return x.XAttachments
	}
	return ""
}

func (x *NodeRecord) GetXTs() int32 {
	if x != nil {
		return x.XTs
	}
	return 0
}

type ListRunsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Runs []*ListRun `protobuf:"bytes,1,rep,name=Runs,proto3" json:"Runs,omitempty"`
}

func (x *ListRunsRes) Reset() {
	*x = ListRunsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_monitoring_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRunsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunsRes) ProtoMessage() {}

func (x *ListRunsRes) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_monitoring_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunsRes.ProtoReflect.Descriptor instead.
func (*ListRunsRes) Descriptor() ([]byte, []int) {
	return file_monitoring_monitoring_proto_rawDescGZIP(), []int{7}
}

func (x *ListRunsRes) GetRuns() []*ListRun {
	if x != nil {
		return x.Runs
	}
	return nil
}

type ListRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowVersionID string                 `protobuf:"bytes,1,opt,name=WorkflowVersionID,json=workflowVersionID,proto3" json:"workflowVersionID"` // 1 projection
	Status            Status                 `protobuf:"varint,2,opt,name=Status,json=status,proto3,enum=monitoring.Status" json:"status"`          // 1 projection
	CreateTime        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=CreateTime,json=createTime,proto3" json:"createTime"`                      // 1 projection
	RunID             string                 `protobuf:"bytes,4,opt,name=RunID,json=runID,proto3" json:"runID"`
}

func (x *ListRun) Reset() {
	*x = ListRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_monitoring_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRun) ProtoMessage() {}

func (x *ListRun) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_monitoring_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRun.ProtoReflect.Descriptor instead.
func (*ListRun) Descriptor() ([]byte, []int) {
	return file_monitoring_monitoring_proto_rawDescGZIP(), []int{8}
}

func (x *ListRun) GetWorkflowVersionID() string {
	if x != nil {
		return x.WorkflowVersionID
	}
	return ""
}

func (x *ListRun) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_NONE
}

func (x *ListRun) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ListRun) GetRunID() string {
	if x != nil {
		return x.RunID
	}
	return ""
}

type QueryRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items      []*QueryItem `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
	TotalItems int32        `protobuf:"varint,2,opt,name=TotalItems,proto3" json:"TotalItems,omitempty"`
}

func (x *QueryRes) Reset() {
	*x = QueryRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_monitoring_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRes) ProtoMessage() {}

func (x *QueryRes) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_monitoring_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRes.ProtoReflect.Descriptor instead.
func (*QueryRes) Descriptor() ([]byte, []int) {
	return file_monitoring_monitoring_proto_rawDescGZIP(), []int{9}
}

func (x *QueryRes) GetItems() []*QueryItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *QueryRes) GetTotalItems() int32 {
	if x != nil {
		return x.TotalItems
	}
	return 0
}

type QueryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunID               string                 `protobuf:"bytes,1,opt,name=RunID,json=runID,proto3" json:"runID"`
	OrganizationName    string                 `protobuf:"bytes,2,opt,name=OrganizationName,json=organizationName,proto3" json:"organizationName"`
	WorkflowName        string                 `protobuf:"bytes,3,opt,name=WorkflowName,json=workflowName,proto3" json:"workflowName"`
	WorkflowVersionName string                 `protobuf:"bytes,4,opt,name=WorkflowVersionName,json=workflowVersionName,proto3" json:"workflowVersionName"`
	Status              Status                 `protobuf:"varint,5,opt,name=Status,json=status,proto3,enum=monitoring.Status" json:"status"`
	Time                *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Time,json=updateTime,proto3" json:"updateTime"`
	WorkflowVersionID   string                 `protobuf:"bytes,7,opt,name=WorkflowVersionID,json=workflowVersionID,proto3" json:"workflowVersionID"` // 0 projection
	WorkflowID          string                 `protobuf:"bytes,8,opt,name=WorkflowID,json=workflowID,proto3" json:"workflowID"`                      // 0 projection
	ClientID            string                 `protobuf:"bytes,9,opt,name=clientID,proto3" json:"clientID"`
}

func (x *QueryItem) Reset() {
	*x = QueryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_monitoring_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryItem) ProtoMessage() {}

func (x *QueryItem) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_monitoring_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryItem.ProtoReflect.Descriptor instead.
func (*QueryItem) Descriptor() ([]byte, []int) {
	return file_monitoring_monitoring_proto_rawDescGZIP(), []int{10}
}

func (x *QueryItem) GetRunID() string {
	if x != nil {
		return x.RunID
	}
	return ""
}

func (x *QueryItem) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

func (x *QueryItem) GetWorkflowName() string {
	if x != nil {
		return x.WorkflowName
	}
	return ""
}

func (x *QueryItem) GetWorkflowVersionName() string {
	if x != nil {
		return x.WorkflowVersionName
	}
	return ""
}

func (x *QueryItem) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_NONE
}

func (x *QueryItem) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *QueryItem) GetWorkflowVersionID() string {
	if x != nil {
		return x.WorkflowVersionID
	}
	return ""
}

func (x *QueryItem) GetWorkflowID() string {
	if x != nil {
		return x.WorkflowID
	}
	return ""
}

func (x *QueryItem) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

type QueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration          Duration         `protobuf:"varint,1,opt,name=Duration,json=duration,proto3,enum=monitoring.Duration" json:"duration"`
	Status            *Status          `protobuf:"varint,2,opt,name=Status,json=status,proto3,enum=monitoring.Status,oneof" json:"status"`
	WorkflowID        *string          `protobuf:"bytes,3,opt,name=WorkflowID,json=workflowID,proto3,oneof" json:"workflowID"`
	WorkflowVersionID *string          `protobuf:"bytes,4,opt,name=WorkflowVersionID,json=workflowVersionID,proto3,oneof" json:"workflowVersionID"`
	QueryClientID     *string          `protobuf:"bytes,5,opt,name=QueryClientID,json=queryClientID,proto3,oneof" json:"queryClientID"`
	PageSize          int32            `protobuf:"varint,6,opt,name=PageSize,json=pageSize,proto3" json:"pageSize"`
	Page              int32            `protobuf:"varint,7,opt,name=Page,json=page,proto3" json:"page"`
	DateRange         *CustomDateRange `protobuf:"bytes,8,opt,name=DateRange,json=customDuration,proto3,oneof" json:"customDuration"`
	NodeId            *string          `protobuf:"bytes,9,opt,name=NodeId,json=nodeId,proto3,oneof" json:"nodeId"`
}

func (x *QueryReq) Reset() {
	*x = QueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_monitoring_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryReq) ProtoMessage() {}

func (x *QueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_monitoring_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryReq.ProtoReflect.Descriptor instead.
func (*QueryReq) Descriptor() ([]byte, []int) {
	return file_monitoring_monitoring_proto_rawDescGZIP(), []int{11}
}

func (x *QueryReq) GetDuration() Duration {
	if x != nil {
		return x.Duration
	}
	return Duration_LAST_15_MIN
}

func (x *QueryReq) GetStatus() Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Status_STATUS_NONE
}

func (x *QueryReq) GetWorkflowID() string {
	if x != nil && x.WorkflowID != nil {
		return *x.WorkflowID
	}
	return ""
}

func (x *QueryReq) GetWorkflowVersionID() string {
	if x != nil && x.WorkflowVersionID != nil {
		return *x.WorkflowVersionID
	}
	return ""
}

func (x *QueryReq) GetQueryClientID() string {
	if x != nil && x.QueryClientID != nil {
		return *x.QueryClientID
	}
	return ""
}

func (x *QueryReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QueryReq) GetDateRange() *CustomDateRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *QueryReq) GetNodeId() string {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return ""
}

type SavedQueryList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queries []*SavedQueryRecord `protobuf:"bytes,1,rep,name=Queries,proto3" json:"Queries,omitempty"`
}

func (x *SavedQueryList) Reset() {
	*x = SavedQueryList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_monitoring_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavedQueryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavedQueryList) ProtoMessage() {}

func (x *SavedQueryList) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_monitoring_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavedQueryList.ProtoReflect.Descriptor instead.
func (*SavedQueryList) Descriptor() ([]byte, []int) {
	return file_monitoring_monitoring_proto_rawDescGZIP(), []int{12}
}

func (x *SavedQueryList) GetQueries() []*SavedQueryRecord {
	if x != nil {
		return x.Queries
	}
	return nil
}

type CustomDateRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *CustomDateRange) Reset() {
	*x = CustomDateRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_monitoring_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDateRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDateRange) ProtoMessage() {}

func (x *CustomDateRange) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_monitoring_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDateRange.ProtoReflect.Descriptor instead.
func (*CustomDateRange) Descriptor() ([]byte, []int) {
	return file_monitoring_monitoring_proto_rawDescGZIP(), []int{13}
}

func (x *CustomDateRange) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *CustomDateRange) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type SavedQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string    `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id"`
	Name     string    `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"name"`
	ClientID string    `protobuf:"bytes,3,opt,name=ClientID,json=clientID,proto3" json:"clientID"`
	Query    *QueryReq `protobuf:"bytes,4,opt,name=Query,json=query,proto3" json:"query"`
}

func (x *SavedQueryReq) Reset() {
	*x = SavedQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_monitoring_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavedQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavedQueryReq) ProtoMessage() {}

func (x *SavedQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_monitoring_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavedQueryReq.ProtoReflect.Descriptor instead.
func (*SavedQueryReq) Descriptor() ([]byte, []int) {
	return file_monitoring_monitoring_proto_rawDescGZIP(), []int{14}
}

func (x *SavedQueryReq) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *SavedQueryReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SavedQueryReq) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *SavedQueryReq) GetQuery() *QueryReq {
	if x != nil {
		return x.Query
	}
	return nil
}

type SavedQueryRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           string    `protobuf:"bytes,1,opt,name=ID,json=id,proto3" json:"id"`
	Name         string    `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"name"`
	ClientID     string    `protobuf:"bytes,3,opt,name=ClientID,json=clientID,proto3" json:"clientID"`
	Query        *QueryReq `protobuf:"bytes,4,opt,name=Query,json=query,proto3" json:"query"`
	PartitionKey string    `protobuf:"bytes,5,opt,name=PartitionKey,json=partitionKey,proto3" json:"partitionKey"`
	XRid         string    `protobuf:"bytes,6,opt,name=_rid,proto3" json:"_rid"`
	XSelf        string    `protobuf:"bytes,7,opt,name=_self,proto3" json:"_self"`
	XEtag        string    `protobuf:"bytes,8,opt,name=_etag,proto3" json:"_etag"`
	XAttachments string    `protobuf:"bytes,9,opt,name=_attachments,proto3" json:"_attachments"`
	XTs          int32     `protobuf:"varint,10,opt,name=_ts,proto3" json:"_ts"`
}

func (x *SavedQueryRecord) Reset() {
	*x = SavedQueryRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_monitoring_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavedQueryRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavedQueryRecord) ProtoMessage() {}

func (x *SavedQueryRecord) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_monitoring_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavedQueryRecord.ProtoReflect.Descriptor instead.
func (*SavedQueryRecord) Descriptor() ([]byte, []int) {
	return file_monitoring_monitoring_proto_rawDescGZIP(), []int{15}
}

func (x *SavedQueryRecord) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *SavedQueryRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SavedQueryRecord) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *SavedQueryRecord) GetQuery() *QueryReq {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SavedQueryRecord) GetPartitionKey() string {
	if x != nil {
		return x.PartitionKey
	}
	return ""
}

func (x *SavedQueryRecord) GetXRid() string {
	if x != nil {
		return x.XRid
	}
	return ""
}

func (x *SavedQueryRecord) GetXSelf() string {
	if x != nil {
		return x.XSelf
	}
	return ""
}

func (x *SavedQueryRecord) GetXEtag() string {
	if x != nil {
		return x.XEtag
	}
	return ""
}

func (x *SavedQueryRecord) GetXAttachments() string {
	if x != nil {
		return x.XAttachments
	}
	return ""
}

func (x *SavedQueryRecord) GetXTs() int32 {
	if x != nil {
		return x.XTs
	}
	return 0
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_monitoring_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_monitoring_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_monitoring_monitoring_proto_rawDescGZIP(), []int{16}
}

type IdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdRequest) Reset() {
	*x = IdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoring_monitoring_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdRequest) ProtoMessage() {}

func (x *IdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoring_monitoring_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdRequest.ProtoReflect.Descriptor instead.
func (*IdRequest) Descriptor() ([]byte, []int) {
	return file_monitoring_monitoring_proto_rawDescGZIP(), []int{17}
}

func (x *IdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_monitoring_monitoring_proto protoreflect.FileDescriptor

var file_monitoring_monitoring_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x1f, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x74, 0x61, 0x67, 0x2f, 0x74, 0x61, 0x67,
	0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x79, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0x9a, 0x84, 0x9e, 0x03, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69,
	0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x11, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1d, 0x9a, 0x84, 0x9e, 0x03, 0x18, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22,
	0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x22, 0x5a, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x4b, 0x0a, 0x11, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x9a,
	0x84, 0x9e, 0x03, 0x18, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x52, 0x11, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22,
	0x81, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a,
	0x05, 0x52, 0x75, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x9a, 0x84,
	0x9e, 0x03, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x75, 0x6e, 0x49, 0x44, 0x22, 0x52,
	0x05, 0x72, 0x75, 0x6e, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x11, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1d, 0x9a, 0x84, 0x9e, 0x03, 0x18, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22,
	0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x22, 0x45, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x6e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x57, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x05, 0x66, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x73, 0x22, 0xc0, 0x04, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x05, 0x52, 0x75, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x72, 0x75, 0x6e, 0x49, 0x44, 0x22, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x44, 0x12, 0x30,
	0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x14, 0x9a, 0x84, 0x9e, 0x03, 0x0f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x4b, 0x0a, 0x11, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x9a, 0x84, 0x9e,
	0x03, 0x18, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2a, 0x0a,
	0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x9a,
	0x84, 0x9e, 0x03, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44,
	0x22, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x08, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x9a, 0x84, 0x9e,
	0x03, 0x0f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x4e,
	0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15,
	0x9a, 0x84, 0x9e, 0x03, 0x10, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x6f, 0x64, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x22, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x43, 0x0a, 0x06, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x12, 0x9a, 0x84, 0x9e, 0x03, 0x0d,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0x52, 0x06, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x07, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42,
	0x13, 0x9a, 0x84, 0x9e, 0x03, 0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x22, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x27, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x9a, 0x84,
	0x9e, 0x03, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x12, 0x9a, 0x84, 0x9e, 0x03,
	0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc2, 0x08, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0e, 0x9a, 0x84, 0x9e, 0x03, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64,
	0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x52, 0x75, 0x6e, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x72, 0x75, 0x6e, 0x49, 0x44, 0x22, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x44, 0x12, 0x30,
	0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x14, 0x9a, 0x84, 0x9e, 0x03, 0x0f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x4b, 0x0a, 0x11, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x9a, 0x84, 0x9e,
	0x03, 0x18, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2a, 0x0a,
	0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x9a,
	0x84, 0x9e, 0x03, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44,
	0x22, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x08, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x9a, 0x84, 0x9e,
	0x03, 0x0f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x4e,
	0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15,
	0x9a, 0x84, 0x9e, 0x03, 0x10, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x6f, 0x64, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x22, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x2a, 0x0a, 0x06, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x12, 0x9a, 0x84, 0x9e, 0x03, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x22, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x07,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x13, 0x9a,
	0x84, 0x9e, 0x03, 0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x22, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x9a, 0x84, 0x9e, 0x03,
	0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x52, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x16, 0x9a, 0x84, 0x9e, 0x03, 0x11, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x16, 0x9a, 0x84, 0x9e, 0x03, 0x11, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x12, 0x9a, 0x84, 0x9e, 0x03, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x0c,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x52, 0x0c, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x56, 0x0a, 0x0c, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03,
	0x13, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x5f, 0x72, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0x9a, 0x84, 0x9e, 0x03, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x72, 0x69,
	0x64, 0x22, 0x52, 0x04, 0x5f, 0x72, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x5f, 0x73, 0x65, 0x6c,
	0x66, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x22, 0x52, 0x05, 0x5f, 0x73, 0x65, 0x6c,
	0x66, 0x12, 0x27, 0x0a, 0x05, 0x5f, 0x65, 0x74, 0x61, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x65, 0x74,
	0x61, 0x67, 0x22, 0x52, 0x05, 0x5f, 0x65, 0x74, 0x61, 0x67, 0x12, 0x3c, 0x0a, 0x0c, 0x5f, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x52, 0x0c, 0x5f, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x5f, 0x74, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0x9a, 0x84, 0x9e, 0x03, 0x0a, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x5f, 0x74, 0x73, 0x22, 0x52, 0x03, 0x5f, 0x74, 0x73, 0x22, 0x36, 0x0a, 0x0b, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x52, 0x75,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x04, 0x52,
	0x75, 0x6e, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x12,
	0x4b, 0x0a, 0x11, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x9a, 0x84, 0x9e, 0x03,
	0x18, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x12, 0x9a, 0x84, 0x9e, 0x03, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x16, 0x9a, 0x84,
	0x9e, 0x03, 0x11, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x05, 0x52, 0x75, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x75, 0x6e, 0x49,
	0x44, 0x22, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x44, 0x22, 0x57, 0x0a, 0x08, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0xd4, 0x04, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x27, 0x0a, 0x05, 0x52, 0x75, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x75, 0x6e, 0x49,
	0x44, 0x22, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x44, 0x12, 0x48, 0x0a, 0x10, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1c, 0x9a, 0x84, 0x9e, 0x03, 0x17, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x51, 0x0a, 0x13, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f,
	0x9a, 0x84, 0x9e, 0x03, 0x1a, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x52,
	0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x12, 0x9a, 0x84, 0x9e, 0x03, 0x0d, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x16,
	0x9a, 0x84, 0x9e, 0x03, 0x11, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x11, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x9a,
	0x84, 0x9e, 0x03, 0x18, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x52, 0x11, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x36, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x16, 0x9a, 0x84, 0x9e, 0x03, 0x11, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x22, 0x52, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x9a, 0x84, 0x9e, 0x03, 0x0f,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xb1, 0x05, 0x0a, 0x08, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x46, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x14,
	0x9a, 0x84, 0x9e, 0x03, 0x0f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x12, 0x9a, 0x84, 0x9e, 0x03, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x9a, 0x84, 0x9e, 0x03, 0x11, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x22, 0x48,
	0x01, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x50, 0x0a, 0x11, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x9a, 0x84, 0x9e,
	0x03, 0x18, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x48, 0x02, 0x52, 0x11, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x44, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x9a, 0x84, 0x9e, 0x03, 0x14,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x22, 0x48, 0x03, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0x9a, 0x84, 0x9e, 0x03,
	0x0f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x50, 0x61,
	0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0x9a, 0x84, 0x9e, 0x03, 0x0b, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x61, 0x67, 0x65, 0x22, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x5f, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x1a, 0x9a, 0x84, 0x9e, 0x03, 0x15, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x04, 0x52, 0x0e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x12, 0x9a, 0x84, 0x9e, 0x03, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x22, 0x48, 0x05, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x44, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x48, 0x0a,
	0x0e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x07, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x61,
	0x76, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07,
	0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x0d,
	0x53, 0x61, 0x76, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x9a, 0x84, 0x9e, 0x03, 0x09,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x9a, 0x84, 0x9e,
	0x03, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x9a, 0x84, 0x9e, 0x03, 0x0f, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x42, 0x11, 0x9a, 0x84, 0x9e, 0x03,
	0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x22, 0xe0, 0x03, 0x0a, 0x10, 0x53, 0x61, 0x76, 0x65, 0x64, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x9a, 0x84, 0x9e, 0x03, 0x09, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x9a, 0x84, 0x9e, 0x03, 0x0b, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0x9a, 0x84, 0x9e, 0x03, 0x0f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x3d, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x42, 0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x3c, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x9a, 0x84, 0x9e, 0x03, 0x13, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22,
	0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x24,
	0x0a, 0x04, 0x5f, 0x72, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x9a, 0x84,
	0x9e, 0x03, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x72, 0x69, 0x64, 0x22, 0x52, 0x04,
	0x5f, 0x72, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x5f, 0x73, 0x65, 0x6c, 0x66, 0x22, 0x52, 0x05, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x12, 0x27, 0x0a,
	0x05, 0x5f, 0x65, 0x74, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x9a, 0x84,
	0x9e, 0x03, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x65, 0x74, 0x61, 0x67, 0x22, 0x52,
	0x05, 0x5f, 0x65, 0x74, 0x61, 0x67, 0x12, 0x3c, 0x0a, 0x0c, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x9a, 0x84,
	0x9e, 0x03, 0x13, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x52, 0x0c, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x03, 0x5f, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0f, 0x9a, 0x84, 0x9e, 0x03, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x74,
	0x73, 0x22, 0x52, 0x03, 0x5f, 0x74, 0x73, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x1b, 0x0a, 0x09, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x2a, 0x31, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02,
	0x2a, 0x46, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65,
	0x4c, 0x6f, 0x67, 0x73, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x10, 0x02, 0x2a, 0x7c, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x31, 0x35, 0x5f,
	0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x33, 0x30,
	0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x48,
	0x4f, 0x55, 0x52, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x32, 0x34,
	0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x53, 0x54,
	0x5f, 0x33, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41, 0x53,
	0x54, 0x5f, 0x37, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x10, 0x06, 0x32, 0xc6, 0x02, 0x0a, 0x0a, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x19, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e,
	0x73, 0x12, 0x17, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x12,
	0x15, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x3e, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x17, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x32,
	0xe2, 0x02, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x17, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x12, 0x14, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x48, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x19, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53,
	0x61, 0x76, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x19, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x11, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x15, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x00, 0x42, 0x13, 0x5a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_monitoring_monitoring_proto_rawDescOnce sync.Once
	file_monitoring_monitoring_proto_rawDescData = file_monitoring_monitoring_proto_rawDesc
)

func file_monitoring_monitoring_proto_rawDescGZIP() []byte {
	file_monitoring_monitoring_proto_rawDescOnce.Do(func() {
		file_monitoring_monitoring_proto_rawDescData = protoimpl.X.CompressGZIP(file_monitoring_monitoring_proto_rawDescData)
	})
	return file_monitoring_monitoring_proto_rawDescData
}

var file_monitoring_monitoring_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_monitoring_monitoring_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_monitoring_monitoring_proto_goTypes = []interface{}{
	(Status)(0),                   // 0: monitoring.Status
	(ResourceType)(0),             // 1: monitoring.ResourceType
	(Duration)(0),                 // 2: monitoring.Duration
	(*GetNodeReq)(nil),            // 3: monitoring.GetNodeReq
	(*ListRunsReq)(nil),           // 4: monitoring.ListRunsReq
	(*GetRunReq)(nil),             // 5: monitoring.GetRunReq
	(*GetRunRes)(nil),             // 6: monitoring.GetRunRes
	(*GetChartRes)(nil),           // 7: monitoring.GetChartRes
	(*InsertNodeReq)(nil),         // 8: monitoring.InsertNodeReq
	(*NodeRecord)(nil),            // 9: monitoring.NodeRecord
	(*ListRunsRes)(nil),           // 10: monitoring.ListRunsRes
	(*ListRun)(nil),               // 11: monitoring.ListRun
	(*QueryRes)(nil),              // 12: monitoring.QueryRes
	(*QueryItem)(nil),             // 13: monitoring.QueryItem
	(*QueryReq)(nil),              // 14: monitoring.QueryReq
	(*SavedQueryList)(nil),        // 15: monitoring.SavedQueryList
	(*CustomDateRange)(nil),       // 16: monitoring.customDateRange
	(*SavedQueryReq)(nil),         // 17: monitoring.SavedQueryReq
	(*SavedQueryRecord)(nil),      // 18: monitoring.SavedQueryRecord
	(*Empty)(nil),                 // 19: monitoring.Empty
	(*IdRequest)(nil),             // 20: monitoring.IdRequest
	(*structpb.Struct)(nil),       // 21: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil), // 22: google.protobuf.Timestamp
}
var file_monitoring_monitoring_proto_depIdxs = []int32{
	9,  // 0: monitoring.GetRunRes.nodeRecords:type_name -> monitoring.NodeRecord
	21, // 1: monitoring.InsertNodeReq.Inputs:type_name -> google.protobuf.Struct
	21, // 2: monitoring.InsertNodeReq.Outputs:type_name -> google.protobuf.Struct
	0,  // 3: monitoring.InsertNodeReq.Status:type_name -> monitoring.Status
	22, // 4: monitoring.NodeRecord.CreateTime:type_name -> google.protobuf.Timestamp
	22, // 5: monitoring.NodeRecord.UpdateTime:type_name -> google.protobuf.Timestamp
	0,  // 6: monitoring.NodeRecord.Status:type_name -> monitoring.Status
	1,  // 7: monitoring.NodeRecord.ResourceType:type_name -> monitoring.ResourceType
	11, // 8: monitoring.ListRunsRes.Runs:type_name -> monitoring.ListRun
	0,  // 9: monitoring.ListRun.Status:type_name -> monitoring.Status
	22, // 10: monitoring.ListRun.CreateTime:type_name -> google.protobuf.Timestamp
	13, // 11: monitoring.QueryRes.Items:type_name -> monitoring.QueryItem
	0,  // 12: monitoring.QueryItem.Status:type_name -> monitoring.Status
	22, // 13: monitoring.QueryItem.Time:type_name -> google.protobuf.Timestamp
	2,  // 14: monitoring.QueryReq.Duration:type_name -> monitoring.Duration
	0,  // 15: monitoring.QueryReq.Status:type_name -> monitoring.Status
	16, // 16: monitoring.QueryReq.DateRange:type_name -> monitoring.customDateRange
	18, // 17: monitoring.SavedQueryList.Queries:type_name -> monitoring.SavedQueryRecord
	22, // 18: monitoring.customDateRange.startTime:type_name -> google.protobuf.Timestamp
	22, // 19: monitoring.customDateRange.endTime:type_name -> google.protobuf.Timestamp
	14, // 20: monitoring.SavedQueryReq.Query:type_name -> monitoring.QueryReq
	14, // 21: monitoring.SavedQueryRecord.Query:type_name -> monitoring.QueryReq
	8,  // 22: monitoring.Monitoring.InsertNode:input_type -> monitoring.InsertNodeReq
	3,  // 23: monitoring.Monitoring.GetNode:input_type -> monitoring.GetNodeReq
	4,  // 24: monitoring.Monitoring.ListRuns:input_type -> monitoring.ListRunsReq
	5,  // 25: monitoring.Monitoring.GetRun:input_type -> monitoring.GetRunReq
	4,  // 26: monitoring.Monitoring.GetChart:input_type -> monitoring.ListRunsReq
	14, // 27: monitoring.Query.QueryPublishedWorkflows:input_type -> monitoring.QueryReq
	17, // 28: monitoring.Query.CreateQuery:input_type -> monitoring.SavedQueryReq
	17, // 29: monitoring.Query.UpdateQuery:input_type -> monitoring.SavedQueryReq
	19, // 30: monitoring.Query.GetQueries:input_type -> monitoring.Empty
	20, // 31: monitoring.Query.DeleteQuery:input_type -> monitoring.IdRequest
	9,  // 32: monitoring.Monitoring.InsertNode:output_type -> monitoring.NodeRecord
	9,  // 33: monitoring.Monitoring.GetNode:output_type -> monitoring.NodeRecord
	10, // 34: monitoring.Monitoring.ListRuns:output_type -> monitoring.ListRunsRes
	6,  // 35: monitoring.Monitoring.GetRun:output_type -> monitoring.GetRunRes
	7,  // 36: monitoring.Monitoring.GetChart:output_type -> monitoring.GetChartRes
	12, // 37: monitoring.Query.QueryPublishedWorkflows:output_type -> monitoring.QueryRes
	18, // 38: monitoring.Query.CreateQuery:output_type -> monitoring.SavedQueryRecord
	18, // 39: monitoring.Query.UpdateQuery:output_type -> monitoring.SavedQueryRecord
	15, // 40: monitoring.Query.GetQueries:output_type -> monitoring.SavedQueryList
	20, // 41: monitoring.Query.DeleteQuery:output_type -> monitoring.IdRequest
	32, // [32:42] is the sub-list for method output_type
	22, // [22:32] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_monitoring_monitoring_proto_init() }
func file_monitoring_monitoring_proto_init() {
	if File_monitoring_monitoring_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_monitoring_monitoring_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_monitoring_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRunsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_monitoring_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRunReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_monitoring_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRunRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_monitoring_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChartRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_monitoring_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_monitoring_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_monitoring_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRunsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_monitoring_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_monitoring_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_monitoring_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_monitoring_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_monitoring_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavedQueryList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_monitoring_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDateRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_monitoring_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavedQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_monitoring_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavedQueryRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_monitoring_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoring_monitoring_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_monitoring_monitoring_proto_msgTypes[11].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_monitoring_monitoring_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_monitoring_monitoring_proto_goTypes,
		DependencyIndexes: file_monitoring_monitoring_proto_depIdxs,
		EnumInfos:         file_monitoring_monitoring_proto_enumTypes,
		MessageInfos:      file_monitoring_monitoring_proto_msgTypes,
	}.Build()
	File_monitoring_monitoring_proto = out.File
	file_monitoring_monitoring_proto_rawDesc = nil
	file_monitoring_monitoring_proto_goTypes = nil
	file_monitoring_monitoring_proto_depIdxs = nil
}
