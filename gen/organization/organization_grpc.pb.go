// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: organization/organization.proto

package organization

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrganizationServiceClient is the client API for OrganizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationServiceClient interface {
	Create(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error)
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Organizations, error)
	Get(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*Organization, error)
	Update(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error)
	GetPartnerChildren(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPartnerChildrenRes, error)
	ListFlat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Organizations, error)
	GetApiSubscriptionKeys(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetApiSubscriptionKeysRes, error)
	IsPremium(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*IsPremiumRes, error)
	SetPremium(ctx context.Context, in *SetPremiumRequest, opts ...grpc.CallOption) (*Empty, error)
}

type organizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationServiceClient(cc grpc.ClientConnInterface) OrganizationServiceClient {
	return &organizationServiceClient{cc}
}

func (c *organizationServiceClient) Create(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/organization.OrganizationService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Organizations, error) {
	out := new(Organizations)
	err := c.cc.Invoke(ctx, "/organization.OrganizationService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) Get(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/organization.OrganizationService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) Update(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/organization.OrganizationService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/organization.OrganizationService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetPartnerChildren(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPartnerChildrenRes, error) {
	out := new(GetPartnerChildrenRes)
	err := c.cc.Invoke(ctx, "/organization.OrganizationService/GetPartnerChildren", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) ListFlat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Organizations, error) {
	out := new(Organizations)
	err := c.cc.Invoke(ctx, "/organization.OrganizationService/ListFlat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetApiSubscriptionKeys(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetApiSubscriptionKeysRes, error) {
	out := new(GetApiSubscriptionKeysRes)
	err := c.cc.Invoke(ctx, "/organization.OrganizationService/GetApiSubscriptionKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) IsPremium(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*IsPremiumRes, error) {
	out := new(IsPremiumRes)
	err := c.cc.Invoke(ctx, "/organization.OrganizationService/IsPremium", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) SetPremium(ctx context.Context, in *SetPremiumRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/organization.OrganizationService/SetPremium", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationServiceServer is the server API for OrganizationService service.
// All implementations must embed UnimplementedOrganizationServiceServer
// for forward compatibility
type OrganizationServiceServer interface {
	Create(context.Context, *Organization) (*Organization, error)
	List(context.Context, *Empty) (*Organizations, error)
	Get(context.Context, *RequestByID) (*Organization, error)
	Update(context.Context, *Organization) (*Organization, error)
	Delete(context.Context, *DeleteReq) (*Empty, error)
	GetPartnerChildren(context.Context, *Empty) (*GetPartnerChildrenRes, error)
	ListFlat(context.Context, *Empty) (*Organizations, error)
	GetApiSubscriptionKeys(context.Context, *Empty) (*GetApiSubscriptionKeysRes, error)
	IsPremium(context.Context, *RequestByID) (*IsPremiumRes, error)
	SetPremium(context.Context, *SetPremiumRequest) (*Empty, error)
	mustEmbedUnimplementedOrganizationServiceServer()
}

// UnimplementedOrganizationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationServiceServer struct {
}

func (UnimplementedOrganizationServiceServer) Create(context.Context, *Organization) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrganizationServiceServer) List(context.Context, *Empty) (*Organizations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedOrganizationServiceServer) Get(context.Context, *RequestByID) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedOrganizationServiceServer) Update(context.Context, *Organization) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOrganizationServiceServer) Delete(context.Context, *DeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOrganizationServiceServer) GetPartnerChildren(context.Context, *Empty) (*GetPartnerChildrenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartnerChildren not implemented")
}
func (UnimplementedOrganizationServiceServer) ListFlat(context.Context, *Empty) (*Organizations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlat not implemented")
}
func (UnimplementedOrganizationServiceServer) GetApiSubscriptionKeys(context.Context, *Empty) (*GetApiSubscriptionKeysRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiSubscriptionKeys not implemented")
}
func (UnimplementedOrganizationServiceServer) IsPremium(context.Context, *RequestByID) (*IsPremiumRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPremium not implemented")
}
func (UnimplementedOrganizationServiceServer) SetPremium(context.Context, *SetPremiumRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPremium not implemented")
}
func (UnimplementedOrganizationServiceServer) mustEmbedUnimplementedOrganizationServiceServer() {}

// UnsafeOrganizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationServiceServer will
// result in compilation errors.
type UnsafeOrganizationServiceServer interface {
	mustEmbedUnimplementedOrganizationServiceServer()
}

func RegisterOrganizationServiceServer(s grpc.ServiceRegistrar, srv OrganizationServiceServer) {
	s.RegisterService(&OrganizationService_ServiceDesc, srv)
}

func _OrganizationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Organization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organization.OrganizationService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).Create(ctx, req.(*Organization))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organization.OrganizationService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organization.OrganizationService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).Get(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Organization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organization.OrganizationService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).Update(ctx, req.(*Organization))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organization.OrganizationService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetPartnerChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetPartnerChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organization.OrganizationService/GetPartnerChildren",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetPartnerChildren(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_ListFlat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ListFlat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organization.OrganizationService/ListFlat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ListFlat(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetApiSubscriptionKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetApiSubscriptionKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organization.OrganizationService/GetApiSubscriptionKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetApiSubscriptionKeys(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_IsPremium_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).IsPremium(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organization.OrganizationService/IsPremium",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).IsPremium(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_SetPremium_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPremiumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).SetPremium(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organization.OrganizationService/SetPremium",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).SetPremium(ctx, req.(*SetPremiumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationService_ServiceDesc is the grpc.ServiceDesc for OrganizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "organization.OrganizationService",
	HandlerType: (*OrganizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OrganizationService_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _OrganizationService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _OrganizationService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OrganizationService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OrganizationService_Delete_Handler,
		},
		{
			MethodName: "GetPartnerChildren",
			Handler:    _OrganizationService_GetPartnerChildren_Handler,
		},
		{
			MethodName: "ListFlat",
			Handler:    _OrganizationService_ListFlat_Handler,
		},
		{
			MethodName: "GetApiSubscriptionKeys",
			Handler:    _OrganizationService_GetApiSubscriptionKeys_Handler,
		},
		{
			MethodName: "IsPremium",
			Handler:    _OrganizationService_IsPremium_Handler,
		},
		{
			MethodName: "SetPremium",
			Handler:    _OrganizationService_SetPremium_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "organization/organization.proto",
}

// InvitationCodeServiceClient is the client API for InvitationCodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvitationCodeServiceClient interface {
	GenerateCode(ctx context.Context, in *RequestInvByID, opts ...grpc.CallOption) (*InvitationCode, error)
	ListCodes(ctx context.Context, in *RequestInvByID, opts ...grpc.CallOption) (*InvitationCodes, error)
	RevokeCode(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*Empty, error)
	RegisterWithCode(ctx context.Context, in *RegisterWithCodeReq, opts ...grpc.CallOption) (*RegisterWithCodeRes, error)
}

type invitationCodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvitationCodeServiceClient(cc grpc.ClientConnInterface) InvitationCodeServiceClient {
	return &invitationCodeServiceClient{cc}
}

func (c *invitationCodeServiceClient) GenerateCode(ctx context.Context, in *RequestInvByID, opts ...grpc.CallOption) (*InvitationCode, error) {
	out := new(InvitationCode)
	err := c.cc.Invoke(ctx, "/organization.InvitationCodeService/GenerateCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationCodeServiceClient) ListCodes(ctx context.Context, in *RequestInvByID, opts ...grpc.CallOption) (*InvitationCodes, error) {
	out := new(InvitationCodes)
	err := c.cc.Invoke(ctx, "/organization.InvitationCodeService/ListCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationCodeServiceClient) RevokeCode(ctx context.Context, in *RequestByID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/organization.InvitationCodeService/RevokeCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationCodeServiceClient) RegisterWithCode(ctx context.Context, in *RegisterWithCodeReq, opts ...grpc.CallOption) (*RegisterWithCodeRes, error) {
	out := new(RegisterWithCodeRes)
	err := c.cc.Invoke(ctx, "/organization.InvitationCodeService/RegisterWithCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvitationCodeServiceServer is the server API for InvitationCodeService service.
// All implementations must embed UnimplementedInvitationCodeServiceServer
// for forward compatibility
type InvitationCodeServiceServer interface {
	GenerateCode(context.Context, *RequestInvByID) (*InvitationCode, error)
	ListCodes(context.Context, *RequestInvByID) (*InvitationCodes, error)
	RevokeCode(context.Context, *RequestByID) (*Empty, error)
	RegisterWithCode(context.Context, *RegisterWithCodeReq) (*RegisterWithCodeRes, error)
	mustEmbedUnimplementedInvitationCodeServiceServer()
}

// UnimplementedInvitationCodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInvitationCodeServiceServer struct {
}

func (UnimplementedInvitationCodeServiceServer) GenerateCode(context.Context, *RequestInvByID) (*InvitationCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCode not implemented")
}
func (UnimplementedInvitationCodeServiceServer) ListCodes(context.Context, *RequestInvByID) (*InvitationCodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCodes not implemented")
}
func (UnimplementedInvitationCodeServiceServer) RevokeCode(context.Context, *RequestByID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeCode not implemented")
}
func (UnimplementedInvitationCodeServiceServer) RegisterWithCode(context.Context, *RegisterWithCodeReq) (*RegisterWithCodeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWithCode not implemented")
}
func (UnimplementedInvitationCodeServiceServer) mustEmbedUnimplementedInvitationCodeServiceServer() {}

// UnsafeInvitationCodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvitationCodeServiceServer will
// result in compilation errors.
type UnsafeInvitationCodeServiceServer interface {
	mustEmbedUnimplementedInvitationCodeServiceServer()
}

func RegisterInvitationCodeServiceServer(s grpc.ServiceRegistrar, srv InvitationCodeServiceServer) {
	s.RegisterService(&InvitationCodeService_ServiceDesc, srv)
}

func _InvitationCodeService_GenerateCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInvByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationCodeServiceServer).GenerateCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organization.InvitationCodeService/GenerateCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationCodeServiceServer).GenerateCode(ctx, req.(*RequestInvByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationCodeService_ListCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInvByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationCodeServiceServer).ListCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organization.InvitationCodeService/ListCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationCodeServiceServer).ListCodes(ctx, req.(*RequestInvByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationCodeService_RevokeCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationCodeServiceServer).RevokeCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organization.InvitationCodeService/RevokeCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationCodeServiceServer).RevokeCode(ctx, req.(*RequestByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationCodeService_RegisterWithCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterWithCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationCodeServiceServer).RegisterWithCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organization.InvitationCodeService/RegisterWithCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationCodeServiceServer).RegisterWithCode(ctx, req.(*RegisterWithCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// InvitationCodeService_ServiceDesc is the grpc.ServiceDesc for InvitationCodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvitationCodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "organization.InvitationCodeService",
	HandlerType: (*InvitationCodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateCode",
			Handler:    _InvitationCodeService_GenerateCode_Handler,
		},
		{
			MethodName: "ListCodes",
			Handler:    _InvitationCodeService_ListCodes_Handler,
		},
		{
			MethodName: "RevokeCode",
			Handler:    _InvitationCodeService_RevokeCode_Handler,
		},
		{
			MethodName: "RegisterWithCode",
			Handler:    _InvitationCodeService_RegisterWithCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "organization/organization.proto",
}
