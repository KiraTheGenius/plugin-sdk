// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: organization/organization.proto

package organization

import (
	_ "github.com/amsokol/mongo-go-driver-protobuf/pmongo"
	_ "github.com/amsokol/protoc-gen-gotag/tagger"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResourceType int32

const (
	ResourceType_PARENT  ResourceType = 0 // (direct org)
	ResourceType_PARTNER ResourceType = 1
	ResourceType_CHILD   ResourceType = 2
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "PARENT",
		1: "PARTNER",
		2: "CHILD",
	}
	ResourceType_value = map[string]int32{
		"PARENT":  0,
		"PARTNER": 1,
		"CHILD":   2,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_organization_organization_proto_enumTypes[0].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_organization_organization_proto_enumTypes[0]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{0}
}

type DocumentType int32

const (
	DocumentType_NONE            DocumentType = 0
	DocumentType_ORGANIZATION    DocumentType = 1
	DocumentType_INVITATION_CODE DocumentType = 2
)

// Enum value maps for DocumentType.
var (
	DocumentType_name = map[int32]string{
		0: "NONE",
		1: "ORGANIZATION",
		2: "INVITATION_CODE",
	}
	DocumentType_value = map[string]int32{
		"NONE":            0,
		"ORGANIZATION":    1,
		"INVITATION_CODE": 2,
	}
)

func (x DocumentType) Enum() *DocumentType {
	p := new(DocumentType)
	*p = x
	return p
}

func (x DocumentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentType) Descriptor() protoreflect.EnumDescriptor {
	return file_organization_organization_proto_enumTypes[1].Descriptor()
}

func (DocumentType) Type() protoreflect.EnumType {
	return &file_organization_organization_proto_enumTypes[1]
}

func (x DocumentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentType.Descriptor instead.
func (DocumentType) EnumDescriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{1}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{0}
}

type RequestInvByID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestedClientID string `protobuf:"bytes,1,opt,name=requestedClientID,proto3" json:"requestedClientID,omitempty"`
}

func (x *RequestInvByID) Reset() {
	*x = RequestInvByID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestInvByID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestInvByID) ProtoMessage() {}

func (x *RequestInvByID) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestInvByID.ProtoReflect.Descriptor instead.
func (*RequestInvByID) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{1}
}

func (x *RequestInvByID) GetRequestedClientID() string {
	if x != nil {
		return x.RequestedClientID
	}
	return ""
}

type RequestByID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
}

func (x *RequestByID) Reset() {
	*x = RequestByID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestByID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestByID) ProtoMessage() {}

func (x *RequestByID) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestByID.ProtoReflect.Descriptor instead.
func (*RequestByID) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{2}
}

func (x *RequestByID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateChildReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Child *Organization `protobuf:"bytes,2,opt,name=child,proto3" json:"child,omitempty"`
}

func (x *CreateChildReq) Reset() {
	*x = CreateChildReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChildReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChildReq) ProtoMessage() {}

func (x *CreateChildReq) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChildReq.ProtoReflect.Descriptor instead.
func (*CreateChildReq) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{3}
}

func (x *CreateChildReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateChildReq) GetChild() *Organization {
	if x != nil {
		return x.Child
	}
	return nil
}

type DeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	// Types that are assignable to UserAction:
	//
	//	*DeleteReq_DeleteUsers
	//	*DeleteReq_TransferToOrganizationByID
	UserAction isDeleteReq_UserAction `protobuf_oneof:"userAction"`
}

func (x *DeleteReq) Reset() {
	*x = DeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReq) ProtoMessage() {}

func (x *DeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReq.ProtoReflect.Descriptor instead.
func (*DeleteReq) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *DeleteReq) GetUserAction() isDeleteReq_UserAction {
	if m != nil {
		return m.UserAction
	}
	return nil
}

func (x *DeleteReq) GetDeleteUsers() bool {
	if x, ok := x.GetUserAction().(*DeleteReq_DeleteUsers); ok {
		return x.DeleteUsers
	}
	return false
}

func (x *DeleteReq) GetTransferToOrganizationByID() string {
	if x, ok := x.GetUserAction().(*DeleteReq_TransferToOrganizationByID); ok {
		return x.TransferToOrganizationByID
	}
	return ""
}

type isDeleteReq_UserAction interface {
	isDeleteReq_UserAction()
}

type DeleteReq_DeleteUsers struct {
	DeleteUsers bool `protobuf:"varint,2,opt,name=deleteUsers,proto3,oneof"`
}

type DeleteReq_TransferToOrganizationByID struct {
	TransferToOrganizationByID string `protobuf:"bytes,3,opt,name=transferToOrganizationByID,proto3,oneof"`
}

func (*DeleteReq_DeleteUsers) isDeleteReq_UserAction() {}

func (*DeleteReq_TransferToOrganizationByID) isDeleteReq_UserAction() {}

type Organizations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Organizations []*Organization `protobuf:"bytes,1,rep,name=organizations,proto3" json:"organizations,omitempty"`
}

func (x *Organizations) Reset() {
	*x = Organizations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organizations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organizations) ProtoMessage() {}

func (x *Organizations) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organizations.ProtoReflect.Descriptor instead.
func (*Organizations) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{5}
}

func (x *Organizations) GetOrganizations() []*Organization {
	if x != nil {
		return x.Organizations
	}
	return nil
}

type GetPartnerChildrenRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPartner  bool     `protobuf:"varint,1,opt,name=isPartner,proto3" json:"isPartner,omitempty"`
	ChildrenID []string `protobuf:"bytes,2,rep,name=childrenID,proto3" json:"childrenID,omitempty"`
}

func (x *GetPartnerChildrenRes) Reset() {
	*x = GetPartnerChildrenRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPartnerChildrenRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPartnerChildrenRes) ProtoMessage() {}

func (x *GetPartnerChildrenRes) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPartnerChildrenRes.ProtoReflect.Descriptor instead.
func (*GetPartnerChildrenRes) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{6}
}

func (x *GetPartnerChildrenRes) GetIsPartner() bool {
	if x != nil {
		return x.IsPartner
	}
	return false
}

func (x *GetPartnerChildrenRes) GetChildrenID() []string {
	if x != nil {
		return x.ChildrenID
	}
	return nil
}

type IsPremiumRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPremium bool `protobuf:"varint,1,opt,name=isPremium,proto3" json:"isPremium,omitempty"`
}

func (x *IsPremiumRes) Reset() {
	*x = IsPremiumRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsPremiumRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsPremiumRes) ProtoMessage() {}

func (x *IsPremiumRes) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsPremiumRes.ProtoReflect.Descriptor instead.
func (*IsPremiumRes) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{7}
}

func (x *IsPremiumRes) GetIsPremium() bool {
	if x != nil {
		return x.IsPremium
	}
	return false
}

type Organization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id"`
	Name         string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name" bson:"name"`
	Active       bool                   `protobuf:"varint,3,opt,name=active,proto3" json:"active" bson:"active"`
	Updated      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated,proto3" json:"updated" bson:"updated"`
	Created      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created,proto3" json:"created" bson:"created"`
	UserCount    int32                  `protobuf:"varint,6,opt,name=userCount,proto3" json:",omitempty" bson:",omitempty"` // informational
	ParentID     string                 `protobuf:"bytes,7,opt,name=parentID,proto3" json:"parentID" bson:"parentID"`
	ParentName   string                 `protobuf:"bytes,8,opt,name=parentName,proto3" json:",omitempty" bson:",omitempty"` // informational
	Children     []*Organization        `protobuf:"bytes,9,rep,name=children,proto3" json:",omitempty" bson:",omitempty"`   // informational
	ResourceType ResourceType           `protobuf:"varint,10,opt,name=resourceType,proto3,enum=organization.ResourceType" json:"resourceType" bson:"resourceType"`
	IsPremium    bool                   `protobuf:"varint,11,opt,name=isPremium,proto3" json:"isPremium" bson:"isPremium"`
	PartitionKey string                 `protobuf:"bytes,12,opt,name=partitionKey,proto3" json:"partitionKey" bson:"partitionKey"`
}

func (x *Organization) Reset() {
	*x = Organization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{8}
}

func (x *Organization) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Organization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Organization) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Organization) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *Organization) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Organization) GetUserCount() int32 {
	if x != nil {
		return x.UserCount
	}
	return 0
}

func (x *Organization) GetParentID() string {
	if x != nil {
		return x.ParentID
	}
	return ""
}

func (x *Organization) GetParentName() string {
	if x != nil {
		return x.ParentName
	}
	return ""
}

func (x *Organization) GetChildren() []*Organization {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Organization) GetResourceType() ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return ResourceType_PARENT
}

func (x *Organization) GetIsPremium() bool {
	if x != nil {
		return x.IsPremium
	}
	return false
}

func (x *Organization) GetPartitionKey() string {
	if x != nil {
		return x.PartitionKey
	}
	return ""
}

type GetApiSubscriptionKeysRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryKey   string `protobuf:"bytes,1,opt,name=PrimaryKey,proto3" json:"PrimaryKey,omitempty"`
	SecondaryKey string `protobuf:"bytes,2,opt,name=SecondaryKey,proto3" json:"SecondaryKey,omitempty"`
}

func (x *GetApiSubscriptionKeysRes) Reset() {
	*x = GetApiSubscriptionKeysRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApiSubscriptionKeysRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApiSubscriptionKeysRes) ProtoMessage() {}

func (x *GetApiSubscriptionKeysRes) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApiSubscriptionKeysRes.ProtoReflect.Descriptor instead.
func (*GetApiSubscriptionKeysRes) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{9}
}

func (x *GetApiSubscriptionKeysRes) GetPrimaryKey() string {
	if x != nil {
		return x.PrimaryKey
	}
	return ""
}

func (x *GetApiSubscriptionKeysRes) GetSecondaryKey() string {
	if x != nil {
		return x.SecondaryKey
	}
	return ""
}

type InvitationCodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitationCodes []*InvitationCode `protobuf:"bytes,1,rep,name=invitationCodes,proto3" json:"invitationCodes,omitempty"`
}

func (x *InvitationCodes) Reset() {
	*x = InvitationCodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvitationCodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvitationCodes) ProtoMessage() {}

func (x *InvitationCodes) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvitationCodes.ProtoReflect.Descriptor instead.
func (*InvitationCodes) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{10}
}

func (x *InvitationCodes) GetInvitationCodes() []*InvitationCode {
	if x != nil {
		return x.InvitationCodes
	}
	return nil
}

type RegisterWithCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         string `protobuf:"bytes,1,opt,name=code,proto3" json:"code" bson:"code"`
	InviteeEmail string `protobuf:"bytes,2,opt,name=inviteeEmail,proto3" json:"inviteeEmail" bson:"inviteeEmail"`
	InviteeID    string `protobuf:"bytes,3,opt,name=inviteeID,proto3" json:"inviteeID" bson:"inviteeID"`
}

func (x *RegisterWithCodeReq) Reset() {
	*x = RegisterWithCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterWithCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterWithCodeReq) ProtoMessage() {}

func (x *RegisterWithCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterWithCodeReq.ProtoReflect.Descriptor instead.
func (*RegisterWithCodeReq) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{11}
}

func (x *RegisterWithCodeReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RegisterWithCodeReq) GetInviteeEmail() string {
	if x != nil {
		return x.InviteeEmail
	}
	return ""
}

func (x *RegisterWithCodeReq) GetInviteeID() string {
	if x != nil {
		return x.InviteeID
	}
	return ""
}

type RegisterWithCodeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success" bson:"success"`
	OrgID   string `protobuf:"bytes,2,opt,name=orgID,proto3" json:"orgID" bson:"orgID"`
	OrgName string `protobuf:"bytes,3,opt,name=orgName,proto3" json:"orgName" bson:"orgName"`
}

func (x *RegisterWithCodeRes) Reset() {
	*x = RegisterWithCodeRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterWithCodeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterWithCodeRes) ProtoMessage() {}

func (x *RegisterWithCodeRes) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterWithCodeRes.ProtoReflect.Descriptor instead.
func (*RegisterWithCodeRes) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{12}
}

func (x *RegisterWithCodeRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegisterWithCodeRes) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *RegisterWithCodeRes) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

type InvitationCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id"`
	Code         string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code" bson:"code"`
	OrgID        string                 `protobuf:"bytes,3,opt,name=orgID,proto3" json:"orgID" bson:"orgID"`
	Created      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created,proto3" json:"created" bson:"created"`
	IsValid      bool                   `protobuf:"varint,5,opt,name=isValid,proto3" json:"isValid" bson:"isValid"`
	InviteeEmail string                 `protobuf:"bytes,6,opt,name=inviteeEmail,proto3" json:"inviteeEmail" bson:"inviteeEmail"`
	InviteeID    string                 `protobuf:"bytes,7,opt,name=inviteeID,proto3" json:"inviteeID" bson:"inviteeID"`
	UsedAt       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=usedAt,proto3" json:"usedAt" bson:"usedAt"`
	PartitionKey string                 `protobuf:"bytes,9,opt,name=partitionKey,proto3" json:"partitionKey" bson:"partitionKey"`
}

func (x *InvitationCode) Reset() {
	*x = InvitationCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvitationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvitationCode) ProtoMessage() {}

func (x *InvitationCode) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvitationCode.ProtoReflect.Descriptor instead.
func (*InvitationCode) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{13}
}

func (x *InvitationCode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InvitationCode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *InvitationCode) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *InvitationCode) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *InvitationCode) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *InvitationCode) GetInviteeEmail() string {
	if x != nil {
		return x.InviteeEmail
	}
	return ""
}

func (x *InvitationCode) GetInviteeID() string {
	if x != nil {
		return x.InviteeID
	}
	return ""
}

func (x *InvitationCode) GetUsedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UsedAt
	}
	return nil
}

func (x *InvitationCode) GetPartitionKey() string {
	if x != nil {
		return x.PartitionKey
	}
	return ""
}

type SetPremiumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IsPremium bool   `protobuf:"varint,2,opt,name=isPremium,proto3" json:"isPremium,omitempty"`
}

func (x *SetPremiumRequest) Reset() {
	*x = SetPremiumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_organization_organization_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPremiumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPremiumRequest) ProtoMessage() {}

func (x *SetPremiumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_organization_organization_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPremiumRequest.ProtoReflect.Descriptor instead.
func (*SetPremiumRequest) Descriptor() ([]byte, []int) {
	return file_organization_organization_proto_rawDescGZIP(), []int{14}
}

func (x *SetPremiumRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetPremiumRequest) GetIsPremium() bool {
	if x != nil {
		return x.IsPremium
	}
	return false
}

var File_organization_organization_proto protoreflect.FileDescriptor

var file_organization_organization_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x15, 0x70, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x74, 0x61, 0x67, 0x2f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x3e, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22,
	0x2e, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1f,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x9a, 0x84, 0x9e, 0x03,
	0x0a, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x63, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x9a,
	0x84, 0x9e, 0x03, 0x0a, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x1f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0x9a, 0x84, 0x9e, 0x03, 0x0a, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x1a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x0d, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x55, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x49,
	0x44, 0x22, 0x2c, 0x0a, 0x0c, 0x49, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x52, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x22,
	0xe7, 0x07, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x35, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x9a, 0x84,
	0x9e, 0x03, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x9a, 0x84, 0x9e, 0x03, 0x22, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x29, 0x9a, 0x84, 0x9e, 0x03, 0x24, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x60, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x2a, 0x9a, 0x84, 0x9e, 0x03, 0x25, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22,
	0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x2a, 0x9a, 0x84, 0x9e, 0x03, 0x25, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x22, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2d,
	0x9a, 0x84, 0x9e, 0x03, 0x28, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x9a, 0x84, 0x9e, 0x03,
	0x26, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x4d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x9a, 0x84, 0x9e, 0x03, 0x28, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x65, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x2d,
	0x9a, 0x84, 0x9e, 0x03, 0x28, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x6f, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2f, 0x9a, 0x84, 0x9e, 0x03, 0x2a,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x72,
	0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2c, 0x9a, 0x84, 0x9e,
	0x03, 0x27, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75,
	0x6d, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69,
	0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x22, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65,
	0x6d, 0x69, 0x75, 0x6d, 0x12, 0x53, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x9a, 0x84, 0x9e, 0x03,
	0x2a, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x22, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x52, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x5f, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x69, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x59, 0x0a, 0x0f, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x46, 0x0a,
	0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x3c, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x9a, 0x84, 0x9e,
	0x03, 0x23, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x0c, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x30, 0x9a, 0x84, 0x9e, 0x03, 0x2b, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x22, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x4b, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x9a, 0x84, 0x9e, 0x03, 0x28, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x49, 0x44, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65,
	0x49, 0x44, 0x22, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x49, 0x44, 0x22, 0xcc,
	0x01, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x23, 0x9a, 0x84, 0x9e, 0x03, 0x1e, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x20, 0x20, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x9a, 0x84, 0x9e, 0x03, 0x1c, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x22, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x22, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x3d,
	0x0a, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x23, 0x9a, 0x84, 0x9e, 0x03, 0x1e, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f, 0x72, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f, 0x72, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xca, 0x05,
	0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x9a, 0x84,
	0x9e, 0x03, 0x21, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x9a, 0x84, 0x9e, 0x03, 0x23, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x9a, 0x84, 0x9e, 0x03, 0x24, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x22,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x61, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x2b, 0x9a, 0x84, 0x9e, 0x03, 0x26, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x22, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x69, 0x73,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2b, 0x9a, 0x84, 0x9e,
	0x03, 0x26, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x22,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x54, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x9a, 0x84, 0x9e, 0x03, 0x2b, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x4b, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x9a, 0x84, 0x9e, 0x03,
	0x28, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x49, 0x44,
	0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x49, 0x44, 0x22, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x65, 0x49, 0x44, 0x12, 0x5e, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x2a, 0x9a, 0x84, 0x9e, 0x03, 0x25, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x73, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x73, 0x65, 0x64, 0x41, 0x74, 0x22, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x54, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x9a, 0x84, 0x9e, 0x03,
	0x2b, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x52, 0x0c, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x41, 0x0a, 0x11, 0x53, 0x65,
	0x74, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x2a, 0x32, 0x0a,
	0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52,
	0x54, 0x4e, 0x45, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x10,
	0x02, 0x2a, 0x3f, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4f,
	0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x10, 0x02, 0x32, 0xcb, 0x05, 0x0a, 0x13, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x1a, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x3a,
	0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x03, 0x47, 0x65,
	0x74, 0x12, 0x19, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x1a, 0x2e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x06, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x1a, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x38,
	0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x13, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x13,
	0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x08, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x6c, 0x61, 0x74, 0x12, 0x13, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x69, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x13, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x69, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x09, 0x49, 0x73, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75,
	0x6d, 0x12, 0x19, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x1a, 0x2e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x73, 0x50, 0x72,
	0x65, 0x6d, 0x69, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0a, 0x53, 0x65,
	0x74, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x1f, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x6d, 0x69,
	0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x32, 0xcd, 0x02, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x76, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x1c, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x42,
	0x79, 0x49, 0x44, 0x1a, 0x1d, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0a, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x19, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x1a, 0x13, 0x2e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x42, 0x1c, 0x5a, 0x1a, 0x77, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_organization_organization_proto_rawDescOnce sync.Once
	file_organization_organization_proto_rawDescData = file_organization_organization_proto_rawDesc
)

func file_organization_organization_proto_rawDescGZIP() []byte {
	file_organization_organization_proto_rawDescOnce.Do(func() {
		file_organization_organization_proto_rawDescData = protoimpl.X.CompressGZIP(file_organization_organization_proto_rawDescData)
	})
	return file_organization_organization_proto_rawDescData
}

var file_organization_organization_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_organization_organization_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_organization_organization_proto_goTypes = []interface{}{
	(ResourceType)(0),                 // 0: organization.ResourceType
	(DocumentType)(0),                 // 1: organization.DocumentType
	(*Empty)(nil),                     // 2: organization.Empty
	(*RequestInvByID)(nil),            // 3: organization.RequestInvByID
	(*RequestByID)(nil),               // 4: organization.RequestByID
	(*CreateChildReq)(nil),            // 5: organization.CreateChildReq
	(*DeleteReq)(nil),                 // 6: organization.DeleteReq
	(*Organizations)(nil),             // 7: organization.Organizations
	(*GetPartnerChildrenRes)(nil),     // 8: organization.GetPartnerChildrenRes
	(*IsPremiumRes)(nil),              // 9: organization.IsPremiumRes
	(*Organization)(nil),              // 10: organization.Organization
	(*GetApiSubscriptionKeysRes)(nil), // 11: organization.GetApiSubscriptionKeysRes
	(*InvitationCodes)(nil),           // 12: organization.InvitationCodes
	(*RegisterWithCodeReq)(nil),       // 13: organization.RegisterWithCodeReq
	(*RegisterWithCodeRes)(nil),       // 14: organization.RegisterWithCodeRes
	(*InvitationCode)(nil),            // 15: organization.InvitationCode
	(*SetPremiumRequest)(nil),         // 16: organization.SetPremiumRequest
	(*timestamppb.Timestamp)(nil),     // 17: google.protobuf.Timestamp
}
var file_organization_organization_proto_depIdxs = []int32{
	10, // 0: organization.CreateChildReq.child:type_name -> organization.Organization
	10, // 1: organization.Organizations.organizations:type_name -> organization.Organization
	17, // 2: organization.Organization.updated:type_name -> google.protobuf.Timestamp
	17, // 3: organization.Organization.created:type_name -> google.protobuf.Timestamp
	10, // 4: organization.Organization.children:type_name -> organization.Organization
	0,  // 5: organization.Organization.resourceType:type_name -> organization.ResourceType
	15, // 6: organization.InvitationCodes.invitationCodes:type_name -> organization.InvitationCode
	17, // 7: organization.InvitationCode.created:type_name -> google.protobuf.Timestamp
	17, // 8: organization.InvitationCode.usedAt:type_name -> google.protobuf.Timestamp
	10, // 9: organization.OrganizationService.Create:input_type -> organization.Organization
	2,  // 10: organization.OrganizationService.List:input_type -> organization.Empty
	4,  // 11: organization.OrganizationService.Get:input_type -> organization.RequestByID
	10, // 12: organization.OrganizationService.Update:input_type -> organization.Organization
	6,  // 13: organization.OrganizationService.Delete:input_type -> organization.DeleteReq
	2,  // 14: organization.OrganizationService.GetPartnerChildren:input_type -> organization.Empty
	2,  // 15: organization.OrganizationService.ListFlat:input_type -> organization.Empty
	2,  // 16: organization.OrganizationService.GetApiSubscriptionKeys:input_type -> organization.Empty
	4,  // 17: organization.OrganizationService.IsPremium:input_type -> organization.RequestByID
	16, // 18: organization.OrganizationService.SetPremium:input_type -> organization.SetPremiumRequest
	3,  // 19: organization.InvitationCodeService.GenerateCode:input_type -> organization.RequestInvByID
	3,  // 20: organization.InvitationCodeService.ListCodes:input_type -> organization.RequestInvByID
	4,  // 21: organization.InvitationCodeService.RevokeCode:input_type -> organization.RequestByID
	13, // 22: organization.InvitationCodeService.RegisterWithCode:input_type -> organization.RegisterWithCodeReq
	10, // 23: organization.OrganizationService.Create:output_type -> organization.Organization
	7,  // 24: organization.OrganizationService.List:output_type -> organization.Organizations
	10, // 25: organization.OrganizationService.Get:output_type -> organization.Organization
	10, // 26: organization.OrganizationService.Update:output_type -> organization.Organization
	2,  // 27: organization.OrganizationService.Delete:output_type -> organization.Empty
	8,  // 28: organization.OrganizationService.GetPartnerChildren:output_type -> organization.GetPartnerChildrenRes
	7,  // 29: organization.OrganizationService.ListFlat:output_type -> organization.Organizations
	11, // 30: organization.OrganizationService.GetApiSubscriptionKeys:output_type -> organization.GetApiSubscriptionKeysRes
	9,  // 31: organization.OrganizationService.IsPremium:output_type -> organization.IsPremiumRes
	2,  // 32: organization.OrganizationService.SetPremium:output_type -> organization.Empty
	15, // 33: organization.InvitationCodeService.GenerateCode:output_type -> organization.InvitationCode
	12, // 34: organization.InvitationCodeService.ListCodes:output_type -> organization.InvitationCodes
	2,  // 35: organization.InvitationCodeService.RevokeCode:output_type -> organization.Empty
	14, // 36: organization.InvitationCodeService.RegisterWithCode:output_type -> organization.RegisterWithCodeRes
	23, // [23:37] is the sub-list for method output_type
	9,  // [9:23] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_organization_organization_proto_init() }
func file_organization_organization_proto_init() {
	if File_organization_organization_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_organization_organization_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestInvByID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestByID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChildReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organizations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPartnerChildrenRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsPremiumRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApiSubscriptionKeysRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvitationCodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterWithCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterWithCodeRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvitationCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_organization_organization_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPremiumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_organization_organization_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*DeleteReq_DeleteUsers)(nil),
		(*DeleteReq_TransferToOrganizationByID)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_organization_organization_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_organization_organization_proto_goTypes,
		DependencyIndexes: file_organization_organization_proto_depIdxs,
		EnumInfos:         file_organization_organization_proto_enumTypes,
		MessageInfos:      file_organization_organization_proto_msgTypes,
	}.Build()
	File_organization_organization_proto = out.File
	file_organization_organization_proto_rawDesc = nil
	file_organization_organization_proto_goTypes = nil
	file_organization_organization_proto_depIdxs = nil
}
