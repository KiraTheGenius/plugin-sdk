// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: workflow/workflow.proto

package workflow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorkflowService_CreateWorkflow_FullMethodName                 = "/workflow.WorkflowService/CreateWorkflow"
	WorkflowService_CreateWorkflowVersion_FullMethodName          = "/workflow.WorkflowService/CreateWorkflowVersion"
	WorkflowService_ListWorkflows_FullMethodName                  = "/workflow.WorkflowService/ListWorkflows"
	WorkflowService_ListWorkflowsByFolder_FullMethodName          = "/workflow.WorkflowService/ListWorkflowsByFolder"
	WorkflowService_FilterWorkflowInFolderByStatus_FullMethodName = "/workflow.WorkflowService/FilterWorkflowInFolderByStatus"
	WorkflowService_ListSubWorkflows_FullMethodName               = "/workflow.WorkflowService/ListSubWorkflows"
	WorkflowService_ListTemplates_FullMethodName                  = "/workflow.WorkflowService/ListTemplates"
	WorkflowService_GetWorkflow_FullMethodName                    = "/workflow.WorkflowService/GetWorkflow"
	WorkflowService_GetWorkflowVersion_FullMethodName             = "/workflow.WorkflowService/GetWorkflowVersion"
	WorkflowService_GetWorkflowDetailAndVersions_FullMethodName   = "/workflow.WorkflowService/GetWorkflowDetailAndVersions"
	WorkflowService_GetWorkflowsCount_FullMethodName              = "/workflow.WorkflowService/GetWorkflowsCount"
	WorkflowService_GetVersionDetails_FullMethodName              = "/workflow.WorkflowService/GetVersionDetails"
	WorkflowService_RemoveWorkflow_FullMethodName                 = "/workflow.WorkflowService/RemoveWorkflow"
	WorkflowService_RemoveWorkflowVersion_FullMethodName          = "/workflow.WorkflowService/RemoveWorkflowVersion"
	WorkflowService_CloneWorkflowVersion_FullMethodName           = "/workflow.WorkflowService/CloneWorkflowVersion"
	WorkflowService_CloneWorkflow_FullMethodName                  = "/workflow.WorkflowService/CloneWorkflow"
	WorkflowService_SaveWorkflow_FullMethodName                   = "/workflow.WorkflowService/SaveWorkflow"
	WorkflowService_SaveWorkflowVersion_FullMethodName            = "/workflow.WorkflowService/SaveWorkflowVersion"
	WorkflowService_SaveTestData_FullMethodName                   = "/workflow.WorkflowService/SaveTestData"
	WorkflowService_LoadTestData_FullMethodName                   = "/workflow.WorkflowService/LoadTestData"
	WorkflowService_TransformFromSchema_FullMethodName            = "/workflow.WorkflowService/TransformFromSchema"
	WorkflowService_MakeDefault_FullMethodName                    = "/workflow.WorkflowService/MakeDefault"
	WorkflowService_MarkAsTemplate_FullMethodName                 = "/workflow.WorkflowService/MarkAsTemplate"
	WorkflowService_MoveWorkflowToFolder_FullMethodName           = "/workflow.WorkflowService/MoveWorkflowToFolder"
	WorkflowService_UnPublishWorkflow_FullMethodName              = "/workflow.WorkflowService/UnPublishWorkflow"
)

// WorkflowServiceClient is the client API for WorkflowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowServiceClient interface {
	// CREATE
	CreateWorkflow(ctx context.Context, in *NewWorkflowRequest, opts ...grpc.CallOption) (*Workflow, error)
	CreateWorkflowVersion(ctx context.Context, in *NewWorkflowVersionRequest, opts ...grpc.CallOption) (*WorkflowVersion, error)
	// LIST
	ListWorkflows(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WorkflowsResponse, error)
	ListWorkflowsByFolder(ctx context.Context, in *ListWorkflowsByFolderRequest, opts ...grpc.CallOption) (*WorkflowsResponse, error)
	FilterWorkflowInFolderByStatus(ctx context.Context, in *FilterWorkflow, opts ...grpc.CallOption) (*WorkflowsResponse, error)
	ListSubWorkflows(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListSubWorkflowsRes, error)
	ListTemplates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WorkflowsResponse, error)
	// GET
	GetWorkflow(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Workflow, error)
	GetWorkflowVersion(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*WorkflowVersion, error)
	GetWorkflowDetailAndVersions(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*WorkflowListView, error)
	GetWorkflowsCount(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CountResponse, error)
	GetVersionDetails(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ListTriggerURLResponse, error)
	// REMOVE
	RemoveWorkflow(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*IdRequest, error)
	RemoveWorkflowVersion(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*IdRequest, error)
	// CLONE
	CloneWorkflowVersion(ctx context.Context, in *CloneWorkflowVersionRequest, opts ...grpc.CallOption) (*WorkflowVersionView, error)
	CloneWorkflow(ctx context.Context, in *CloneWorkflowReq, opts ...grpc.CallOption) (*WorkflowListView, error)
	// SAVE
	SaveWorkflow(ctx context.Context, in *Workflow, opts ...grpc.CallOption) (*Workflow, error)
	SaveWorkflowVersion(ctx context.Context, in *WorkflowVersion, opts ...grpc.CallOption) (*WorkflowVersion, error)
	SaveTestData(ctx context.Context, in *TestData, opts ...grpc.CallOption) (*Empty, error)
	// MISCELLANEOUS
	LoadTestData(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*TestData, error)
	TransformFromSchema(ctx context.Context, in *TransformComponentSchemaRequest, opts ...grpc.CallOption) (*TransformFromSchemaResponse, error)
	MakeDefault(ctx context.Context, in *MakeDefaultRequest, opts ...grpc.CallOption) (*Empty, error)
	MarkAsTemplate(ctx context.Context, in *MarkAsTemplateRequest, opts ...grpc.CallOption) (*Empty, error)
	MoveWorkflowToFolder(ctx context.Context, in *MoveWorkflow, opts ...grpc.CallOption) (*Empty, error)
	UnPublishWorkflow(ctx context.Context, in *WorkflowVersion, opts ...grpc.CallOption) (*WorkflowVersion, error)
}

type workflowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowServiceClient(cc grpc.ClientConnInterface) WorkflowServiceClient {
	return &workflowServiceClient{cc}
}

func (c *workflowServiceClient) CreateWorkflow(ctx context.Context, in *NewWorkflowRequest, opts ...grpc.CallOption) (*Workflow, error) {
	out := new(Workflow)
	err := c.cc.Invoke(ctx, WorkflowService_CreateWorkflow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) CreateWorkflowVersion(ctx context.Context, in *NewWorkflowVersionRequest, opts ...grpc.CallOption) (*WorkflowVersion, error) {
	out := new(WorkflowVersion)
	err := c.cc.Invoke(ctx, WorkflowService_CreateWorkflowVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) ListWorkflows(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WorkflowsResponse, error) {
	out := new(WorkflowsResponse)
	err := c.cc.Invoke(ctx, WorkflowService_ListWorkflows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) ListWorkflowsByFolder(ctx context.Context, in *ListWorkflowsByFolderRequest, opts ...grpc.CallOption) (*WorkflowsResponse, error) {
	out := new(WorkflowsResponse)
	err := c.cc.Invoke(ctx, WorkflowService_ListWorkflowsByFolder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) FilterWorkflowInFolderByStatus(ctx context.Context, in *FilterWorkflow, opts ...grpc.CallOption) (*WorkflowsResponse, error) {
	out := new(WorkflowsResponse)
	err := c.cc.Invoke(ctx, WorkflowService_FilterWorkflowInFolderByStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) ListSubWorkflows(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListSubWorkflowsRes, error) {
	out := new(ListSubWorkflowsRes)
	err := c.cc.Invoke(ctx, WorkflowService_ListSubWorkflows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) ListTemplates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WorkflowsResponse, error) {
	out := new(WorkflowsResponse)
	err := c.cc.Invoke(ctx, WorkflowService_ListTemplates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflow(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Workflow, error) {
	out := new(Workflow)
	err := c.cc.Invoke(ctx, WorkflowService_GetWorkflow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflowVersion(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*WorkflowVersion, error) {
	out := new(WorkflowVersion)
	err := c.cc.Invoke(ctx, WorkflowService_GetWorkflowVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflowDetailAndVersions(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*WorkflowListView, error) {
	out := new(WorkflowListView)
	err := c.cc.Invoke(ctx, WorkflowService_GetWorkflowDetailAndVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflowsCount(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, WorkflowService_GetWorkflowsCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetVersionDetails(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ListTriggerURLResponse, error) {
	out := new(ListTriggerURLResponse)
	err := c.cc.Invoke(ctx, WorkflowService_GetVersionDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) RemoveWorkflow(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*IdRequest, error) {
	out := new(IdRequest)
	err := c.cc.Invoke(ctx, WorkflowService_RemoveWorkflow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) RemoveWorkflowVersion(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*IdRequest, error) {
	out := new(IdRequest)
	err := c.cc.Invoke(ctx, WorkflowService_RemoveWorkflowVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) CloneWorkflowVersion(ctx context.Context, in *CloneWorkflowVersionRequest, opts ...grpc.CallOption) (*WorkflowVersionView, error) {
	out := new(WorkflowVersionView)
	err := c.cc.Invoke(ctx, WorkflowService_CloneWorkflowVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) CloneWorkflow(ctx context.Context, in *CloneWorkflowReq, opts ...grpc.CallOption) (*WorkflowListView, error) {
	out := new(WorkflowListView)
	err := c.cc.Invoke(ctx, WorkflowService_CloneWorkflow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) SaveWorkflow(ctx context.Context, in *Workflow, opts ...grpc.CallOption) (*Workflow, error) {
	out := new(Workflow)
	err := c.cc.Invoke(ctx, WorkflowService_SaveWorkflow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) SaveWorkflowVersion(ctx context.Context, in *WorkflowVersion, opts ...grpc.CallOption) (*WorkflowVersion, error) {
	out := new(WorkflowVersion)
	err := c.cc.Invoke(ctx, WorkflowService_SaveWorkflowVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) SaveTestData(ctx context.Context, in *TestData, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, WorkflowService_SaveTestData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) LoadTestData(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*TestData, error) {
	out := new(TestData)
	err := c.cc.Invoke(ctx, WorkflowService_LoadTestData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) TransformFromSchema(ctx context.Context, in *TransformComponentSchemaRequest, opts ...grpc.CallOption) (*TransformFromSchemaResponse, error) {
	out := new(TransformFromSchemaResponse)
	err := c.cc.Invoke(ctx, WorkflowService_TransformFromSchema_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) MakeDefault(ctx context.Context, in *MakeDefaultRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, WorkflowService_MakeDefault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) MarkAsTemplate(ctx context.Context, in *MarkAsTemplateRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, WorkflowService_MarkAsTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) MoveWorkflowToFolder(ctx context.Context, in *MoveWorkflow, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, WorkflowService_MoveWorkflowToFolder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) UnPublishWorkflow(ctx context.Context, in *WorkflowVersion, opts ...grpc.CallOption) (*WorkflowVersion, error) {
	out := new(WorkflowVersion)
	err := c.cc.Invoke(ctx, WorkflowService_UnPublishWorkflow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowServiceServer is the server API for WorkflowService service.
// All implementations must embed UnimplementedWorkflowServiceServer
// for forward compatibility
type WorkflowServiceServer interface {
	// CREATE
	CreateWorkflow(context.Context, *NewWorkflowRequest) (*Workflow, error)
	CreateWorkflowVersion(context.Context, *NewWorkflowVersionRequest) (*WorkflowVersion, error)
	// LIST
	ListWorkflows(context.Context, *Empty) (*WorkflowsResponse, error)
	ListWorkflowsByFolder(context.Context, *ListWorkflowsByFolderRequest) (*WorkflowsResponse, error)
	FilterWorkflowInFolderByStatus(context.Context, *FilterWorkflow) (*WorkflowsResponse, error)
	ListSubWorkflows(context.Context, *Empty) (*ListSubWorkflowsRes, error)
	ListTemplates(context.Context, *Empty) (*WorkflowsResponse, error)
	// GET
	GetWorkflow(context.Context, *IdRequest) (*Workflow, error)
	GetWorkflowVersion(context.Context, *IdRequest) (*WorkflowVersion, error)
	GetWorkflowDetailAndVersions(context.Context, *IdRequest) (*WorkflowListView, error)
	GetWorkflowsCount(context.Context, *Empty) (*CountResponse, error)
	GetVersionDetails(context.Context, *IdRequest) (*ListTriggerURLResponse, error)
	// REMOVE
	RemoveWorkflow(context.Context, *IdRequest) (*IdRequest, error)
	RemoveWorkflowVersion(context.Context, *IdRequest) (*IdRequest, error)
	// CLONE
	CloneWorkflowVersion(context.Context, *CloneWorkflowVersionRequest) (*WorkflowVersionView, error)
	CloneWorkflow(context.Context, *CloneWorkflowReq) (*WorkflowListView, error)
	// SAVE
	SaveWorkflow(context.Context, *Workflow) (*Workflow, error)
	SaveWorkflowVersion(context.Context, *WorkflowVersion) (*WorkflowVersion, error)
	SaveTestData(context.Context, *TestData) (*Empty, error)
	// MISCELLANEOUS
	LoadTestData(context.Context, *IdRequest) (*TestData, error)
	TransformFromSchema(context.Context, *TransformComponentSchemaRequest) (*TransformFromSchemaResponse, error)
	MakeDefault(context.Context, *MakeDefaultRequest) (*Empty, error)
	MarkAsTemplate(context.Context, *MarkAsTemplateRequest) (*Empty, error)
	MoveWorkflowToFolder(context.Context, *MoveWorkflow) (*Empty, error)
	UnPublishWorkflow(context.Context, *WorkflowVersion) (*WorkflowVersion, error)
	mustEmbedUnimplementedWorkflowServiceServer()
}

// UnimplementedWorkflowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkflowServiceServer struct {
}

func (UnimplementedWorkflowServiceServer) CreateWorkflow(context.Context, *NewWorkflowRequest) (*Workflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) CreateWorkflowVersion(context.Context, *NewWorkflowVersionRequest) (*WorkflowVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkflowVersion not implemented")
}
func (UnimplementedWorkflowServiceServer) ListWorkflows(context.Context, *Empty) (*WorkflowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (UnimplementedWorkflowServiceServer) ListWorkflowsByFolder(context.Context, *ListWorkflowsByFolderRequest) (*WorkflowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflowsByFolder not implemented")
}
func (UnimplementedWorkflowServiceServer) FilterWorkflowInFolderByStatus(context.Context, *FilterWorkflow) (*WorkflowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterWorkflowInFolderByStatus not implemented")
}
func (UnimplementedWorkflowServiceServer) ListSubWorkflows(context.Context, *Empty) (*ListSubWorkflowsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubWorkflows not implemented")
}
func (UnimplementedWorkflowServiceServer) ListTemplates(context.Context, *Empty) (*WorkflowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (UnimplementedWorkflowServiceServer) GetWorkflow(context.Context, *IdRequest) (*Workflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) GetWorkflowVersion(context.Context, *IdRequest) (*WorkflowVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowVersion not implemented")
}
func (UnimplementedWorkflowServiceServer) GetWorkflowDetailAndVersions(context.Context, *IdRequest) (*WorkflowListView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowDetailAndVersions not implemented")
}
func (UnimplementedWorkflowServiceServer) GetWorkflowsCount(context.Context, *Empty) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowsCount not implemented")
}
func (UnimplementedWorkflowServiceServer) GetVersionDetails(context.Context, *IdRequest) (*ListTriggerURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersionDetails not implemented")
}
func (UnimplementedWorkflowServiceServer) RemoveWorkflow(context.Context, *IdRequest) (*IdRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) RemoveWorkflowVersion(context.Context, *IdRequest) (*IdRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWorkflowVersion not implemented")
}
func (UnimplementedWorkflowServiceServer) CloneWorkflowVersion(context.Context, *CloneWorkflowVersionRequest) (*WorkflowVersionView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneWorkflowVersion not implemented")
}
func (UnimplementedWorkflowServiceServer) CloneWorkflow(context.Context, *CloneWorkflowReq) (*WorkflowListView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) SaveWorkflow(context.Context, *Workflow) (*Workflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) SaveWorkflowVersion(context.Context, *WorkflowVersion) (*WorkflowVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveWorkflowVersion not implemented")
}
func (UnimplementedWorkflowServiceServer) SaveTestData(context.Context, *TestData) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTestData not implemented")
}
func (UnimplementedWorkflowServiceServer) LoadTestData(context.Context, *IdRequest) (*TestData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadTestData not implemented")
}
func (UnimplementedWorkflowServiceServer) TransformFromSchema(context.Context, *TransformComponentSchemaRequest) (*TransformFromSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransformFromSchema not implemented")
}
func (UnimplementedWorkflowServiceServer) MakeDefault(context.Context, *MakeDefaultRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeDefault not implemented")
}
func (UnimplementedWorkflowServiceServer) MarkAsTemplate(context.Context, *MarkAsTemplateRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAsTemplate not implemented")
}
func (UnimplementedWorkflowServiceServer) MoveWorkflowToFolder(context.Context, *MoveWorkflow) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveWorkflowToFolder not implemented")
}
func (UnimplementedWorkflowServiceServer) UnPublishWorkflow(context.Context, *WorkflowVersion) (*WorkflowVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnPublishWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) mustEmbedUnimplementedWorkflowServiceServer() {}

// UnsafeWorkflowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowServiceServer will
// result in compilation errors.
type UnsafeWorkflowServiceServer interface {
	mustEmbedUnimplementedWorkflowServiceServer()
}

func RegisterWorkflowServiceServer(s grpc.ServiceRegistrar, srv WorkflowServiceServer) {
	s.RegisterService(&WorkflowService_ServiceDesc, srv)
}

func _WorkflowService_CreateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).CreateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_CreateWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).CreateWorkflow(ctx, req.(*NewWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_CreateWorkflowVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewWorkflowVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).CreateWorkflowVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_CreateWorkflowVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).CreateWorkflowVersion(ctx, req.(*NewWorkflowVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_ListWorkflows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).ListWorkflows(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_ListWorkflowsByFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowsByFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).ListWorkflowsByFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_ListWorkflowsByFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).ListWorkflowsByFolder(ctx, req.(*ListWorkflowsByFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_FilterWorkflowInFolderByStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterWorkflow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).FilterWorkflowInFolderByStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_FilterWorkflowInFolderByStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).FilterWorkflowInFolderByStatus(ctx, req.(*FilterWorkflow))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_ListSubWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).ListSubWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_ListSubWorkflows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).ListSubWorkflows(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_ListTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).ListTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_ListTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).ListTemplates(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflow(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflowVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflowVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetWorkflowVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflowVersion(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflowDetailAndVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflowDetailAndVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetWorkflowDetailAndVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflowDetailAndVersions(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflowsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflowsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetWorkflowsCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflowsCount(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetVersionDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetVersionDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetVersionDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetVersionDetails(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_RemoveWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).RemoveWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_RemoveWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).RemoveWorkflow(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_RemoveWorkflowVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).RemoveWorkflowVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_RemoveWorkflowVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).RemoveWorkflowVersion(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_CloneWorkflowVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneWorkflowVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).CloneWorkflowVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_CloneWorkflowVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).CloneWorkflowVersion(ctx, req.(*CloneWorkflowVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_CloneWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneWorkflowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).CloneWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_CloneWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).CloneWorkflow(ctx, req.(*CloneWorkflowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_SaveWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workflow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).SaveWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_SaveWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).SaveWorkflow(ctx, req.(*Workflow))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_SaveWorkflowVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).SaveWorkflowVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_SaveWorkflowVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).SaveWorkflowVersion(ctx, req.(*WorkflowVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_SaveTestData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).SaveTestData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_SaveTestData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).SaveTestData(ctx, req.(*TestData))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_LoadTestData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).LoadTestData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_LoadTestData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).LoadTestData(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_TransformFromSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransformComponentSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).TransformFromSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_TransformFromSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).TransformFromSchema(ctx, req.(*TransformComponentSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_MakeDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).MakeDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_MakeDefault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).MakeDefault(ctx, req.(*MakeDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_MarkAsTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAsTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).MarkAsTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_MarkAsTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).MarkAsTemplate(ctx, req.(*MarkAsTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_MoveWorkflowToFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveWorkflow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).MoveWorkflowToFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_MoveWorkflowToFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).MoveWorkflowToFolder(ctx, req.(*MoveWorkflow))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_UnPublishWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).UnPublishWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_UnPublishWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).UnPublishWorkflow(ctx, req.(*WorkflowVersion))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkflowService_ServiceDesc is the grpc.ServiceDesc for WorkflowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkflowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workflow.WorkflowService",
	HandlerType: (*WorkflowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorkflow",
			Handler:    _WorkflowService_CreateWorkflow_Handler,
		},
		{
			MethodName: "CreateWorkflowVersion",
			Handler:    _WorkflowService_CreateWorkflowVersion_Handler,
		},
		{
			MethodName: "ListWorkflows",
			Handler:    _WorkflowService_ListWorkflows_Handler,
		},
		{
			MethodName: "ListWorkflowsByFolder",
			Handler:    _WorkflowService_ListWorkflowsByFolder_Handler,
		},
		{
			MethodName: "FilterWorkflowInFolderByStatus",
			Handler:    _WorkflowService_FilterWorkflowInFolderByStatus_Handler,
		},
		{
			MethodName: "ListSubWorkflows",
			Handler:    _WorkflowService_ListSubWorkflows_Handler,
		},
		{
			MethodName: "ListTemplates",
			Handler:    _WorkflowService_ListTemplates_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _WorkflowService_GetWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflowVersion",
			Handler:    _WorkflowService_GetWorkflowVersion_Handler,
		},
		{
			MethodName: "GetWorkflowDetailAndVersions",
			Handler:    _WorkflowService_GetWorkflowDetailAndVersions_Handler,
		},
		{
			MethodName: "GetWorkflowsCount",
			Handler:    _WorkflowService_GetWorkflowsCount_Handler,
		},
		{
			MethodName: "GetVersionDetails",
			Handler:    _WorkflowService_GetVersionDetails_Handler,
		},
		{
			MethodName: "RemoveWorkflow",
			Handler:    _WorkflowService_RemoveWorkflow_Handler,
		},
		{
			MethodName: "RemoveWorkflowVersion",
			Handler:    _WorkflowService_RemoveWorkflowVersion_Handler,
		},
		{
			MethodName: "CloneWorkflowVersion",
			Handler:    _WorkflowService_CloneWorkflowVersion_Handler,
		},
		{
			MethodName: "CloneWorkflow",
			Handler:    _WorkflowService_CloneWorkflow_Handler,
		},
		{
			MethodName: "SaveWorkflow",
			Handler:    _WorkflowService_SaveWorkflow_Handler,
		},
		{
			MethodName: "SaveWorkflowVersion",
			Handler:    _WorkflowService_SaveWorkflowVersion_Handler,
		},
		{
			MethodName: "SaveTestData",
			Handler:    _WorkflowService_SaveTestData_Handler,
		},
		{
			MethodName: "LoadTestData",
			Handler:    _WorkflowService_LoadTestData_Handler,
		},
		{
			MethodName: "TransformFromSchema",
			Handler:    _WorkflowService_TransformFromSchema_Handler,
		},
		{
			MethodName: "MakeDefault",
			Handler:    _WorkflowService_MakeDefault_Handler,
		},
		{
			MethodName: "MarkAsTemplate",
			Handler:    _WorkflowService_MarkAsTemplate_Handler,
		},
		{
			MethodName: "MoveWorkflowToFolder",
			Handler:    _WorkflowService_MoveWorkflowToFolder_Handler,
		},
		{
			MethodName: "UnPublishWorkflow",
			Handler:    _WorkflowService_UnPublishWorkflow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workflow/workflow.proto",
}
