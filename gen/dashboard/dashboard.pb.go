// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: dashboard/dashboard.proto

package dashboard

import (
	monitoring "github.com/MyWeHub/plugin-sdk/gen/monitoring"
	workflow "github.com/MyWeHub/plugin-sdk/gen/workflow"
	_ "github.com/amsokol/protoc-gen-gotag/tagger"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Duration int32

const (
	Duration_LAST_DAY     Duration = 0
	Duration_LAST_WEEK    Duration = 1
	Duration_LAST_MONTH   Duration = 2
	Duration_LAST_3_MONTH Duration = 3
	Duration_CUSTOM       Duration = 4
)

// Enum value maps for Duration.
var (
	Duration_name = map[int32]string{
		0: "LAST_DAY",
		1: "LAST_WEEK",
		2: "LAST_MONTH",
		3: "LAST_3_MONTH",
		4: "CUSTOM",
	}
	Duration_value = map[string]int32{
		"LAST_DAY":     0,
		"LAST_WEEK":    1,
		"LAST_MONTH":   2,
		"LAST_3_MONTH": 3,
		"CUSTOM":       4,
	}
)

func (x Duration) Enum() *Duration {
	p := new(Duration)
	*p = x
	return p
}

func (x Duration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Duration) Descriptor() protoreflect.EnumDescriptor {
	return file_dashboard_dashboard_proto_enumTypes[0].Descriptor()
}

func (Duration) Type() protoreflect.EnumType {
	return &file_dashboard_dashboard_proto_enumTypes[0]
}

func (x Duration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Duration.Descriptor instead.
func (Duration) EnumDescriptor() ([]byte, []int) {
	return file_dashboard_dashboard_proto_rawDescGZIP(), []int{0}
}

type IOStatus int32

const (
	IOStatus_UNKNOWN IOStatus = 0
	IOStatus_RUNNING IOStatus = 1
	IOStatus_STOPPED IOStatus = 2
)

// Enum value maps for IOStatus.
var (
	IOStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "RUNNING",
		2: "STOPPED",
	}
	IOStatus_value = map[string]int32{
		"UNKNOWN": 0,
		"RUNNING": 1,
		"STOPPED": 2,
	}
)

func (x IOStatus) Enum() *IOStatus {
	p := new(IOStatus)
	*p = x
	return p
}

func (x IOStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IOStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_dashboard_dashboard_proto_enumTypes[1].Descriptor()
}

func (IOStatus) Type() protoreflect.EnumType {
	return &file_dashboard_dashboard_proto_enumTypes[1]
}

func (x IOStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IOStatus.Descriptor instead.
func (IOStatus) EnumDescriptor() ([]byte, []int) {
	return file_dashboard_dashboard_proto_rawDescGZIP(), []int{1}
}

type AnalyticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration        Duration   `protobuf:"varint,1,opt,name=duration,proto3,enum=dashboard.Duration" json:"duration,omitempty"`
	CustomDateRange *DateRange `protobuf:"bytes,2,opt,name=customDateRange,proto3,oneof" json:"customDateRange,omitempty"`
}

func (x *AnalyticsRequest) Reset() {
	*x = AnalyticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsRequest) ProtoMessage() {}

func (x *AnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsRequest.ProtoReflect.Descriptor instead.
func (*AnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard_proto_rawDescGZIP(), []int{0}
}

func (x *AnalyticsRequest) GetDuration() Duration {
	if x != nil {
		return x.Duration
	}
	return Duration_LAST_DAY
}

func (x *AnalyticsRequest) GetCustomDateRange() *DateRange {
	if x != nil {
		return x.CustomDateRange
	}
	return nil
}

type DateRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *DateRange) Reset() {
	*x = DateRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateRange) ProtoMessage() {}

func (x *DateRange) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateRange.ProtoReflect.Descriptor instead.
func (*DateRange) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard_proto_rawDescGZIP(), []int{1}
}

func (x *DateRange) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *DateRange) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type AnalyticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PluginRuns            int32                    `protobuf:"varint,1,opt,name=pluginRuns,proto3" json:"pluginRuns,omitempty"`
	Workflows             int32                    `protobuf:"varint,2,opt,name=workflows,proto3" json:"workflows,omitempty"`
	PublishedWorkflows    int32                    `protobuf:"varint,3,opt,name=publishedWorkflows,proto3" json:"publishedWorkflows,omitempty"`
	PublishedWorkflowRuns *monitoring.QueryRes     `protobuf:"bytes,4,opt,name=publishedWorkflowRuns,proto3" json:"publishedWorkflowRuns,omitempty"`
	Reservations          *PluginUsageReservation  `protobuf:"bytes,5,opt,name=reservations,proto3" json:"reservations,omitempty"`
	PluginRunsPerDay      map[string]int32         `protobuf:"bytes,6,rep,name=pluginRunsPerDay,proto3" json:"pluginRunsPerDay,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AvgPluginRunsPerDay   int32                    `protobuf:"varint,7,opt,name=avgPluginRunsPerDay,proto3" json:"avgPluginRunsPerDay,omitempty"`
	PluginRunsPerWorkflow map[string]*WorkflowRuns `protobuf:"bytes,8,rep,name=pluginRunsPerWorkflow,proto3" json:"pluginRunsPerWorkflow,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AnalyticsResponse) Reset() {
	*x = AnalyticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsResponse) ProtoMessage() {}

func (x *AnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsResponse.ProtoReflect.Descriptor instead.
func (*AnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard_proto_rawDescGZIP(), []int{2}
}

func (x *AnalyticsResponse) GetPluginRuns() int32 {
	if x != nil {
		return x.PluginRuns
	}
	return 0
}

func (x *AnalyticsResponse) GetWorkflows() int32 {
	if x != nil {
		return x.Workflows
	}
	return 0
}

func (x *AnalyticsResponse) GetPublishedWorkflows() int32 {
	if x != nil {
		return x.PublishedWorkflows
	}
	return 0
}

func (x *AnalyticsResponse) GetPublishedWorkflowRuns() *monitoring.QueryRes {
	if x != nil {
		return x.PublishedWorkflowRuns
	}
	return nil
}

func (x *AnalyticsResponse) GetReservations() *PluginUsageReservation {
	if x != nil {
		return x.Reservations
	}
	return nil
}

func (x *AnalyticsResponse) GetPluginRunsPerDay() map[string]int32 {
	if x != nil {
		return x.PluginRunsPerDay
	}
	return nil
}

func (x *AnalyticsResponse) GetAvgPluginRunsPerDay() int32 {
	if x != nil {
		return x.AvgPluginRunsPerDay
	}
	return 0
}

func (x *AnalyticsResponse) GetPluginRunsPerWorkflow() map[string]*WorkflowRuns {
	if x != nil {
		return x.PluginRunsPerWorkflow
	}
	return nil
}

type WorkflowRuns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Versions []*RunsPerVersion `protobuf:"bytes,1,rep,name=versions,proto3" json:"versions,omitempty"`
}

func (x *WorkflowRuns) Reset() {
	*x = WorkflowRuns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowRuns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowRuns) ProtoMessage() {}

func (x *WorkflowRuns) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowRuns.ProtoReflect.Descriptor instead.
func (*WorkflowRuns) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard_proto_rawDescGZIP(), []int{3}
}

func (x *WorkflowRuns) GetVersions() []*RunsPerVersion {
	if x != nil {
		return x.Versions
	}
	return nil
}

type RunsPerVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Runs    int32  `protobuf:"varint,2,opt,name=runs,proto3" json:"runs,omitempty"`
}

func (x *RunsPerVersion) Reset() {
	*x = RunsPerVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunsPerVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunsPerVersion) ProtoMessage() {}

func (x *RunsPerVersion) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunsPerVersion.ProtoReflect.Descriptor instead.
func (*RunsPerVersion) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard_proto_rawDescGZIP(), []int{4}
}

func (x *RunsPerVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RunsPerVersion) GetRuns() int32 {
	if x != nil {
		return x.Runs
	}
	return 0
}

type PluginUsageReservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalReservation int32 `protobuf:"varint,1,opt,name=totalReservation,proto3" json:"totalReservation,omitempty"`
	PluginUsage      int32 `protobuf:"varint,2,opt,name=pluginUsage,proto3" json:"pluginUsage,omitempty"`
	ExtraPluginRuns  int32 `protobuf:"varint,3,opt,name=extraPluginRuns,proto3" json:"extraPluginRuns,omitempty"`
}

func (x *PluginUsageReservation) Reset() {
	*x = PluginUsageReservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginUsageReservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginUsageReservation) ProtoMessage() {}

func (x *PluginUsageReservation) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginUsageReservation.ProtoReflect.Descriptor instead.
func (*PluginUsageReservation) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard_proto_rawDescGZIP(), []int{5}
}

func (x *PluginUsageReservation) GetTotalReservation() int32 {
	if x != nil {
		return x.TotalReservation
	}
	return 0
}

func (x *PluginUsageReservation) GetPluginUsage() int32 {
	if x != nil {
		return x.PluginUsage
	}
	return 0
}

func (x *PluginUsageReservation) GetExtraPluginRuns() int32 {
	if x != nil {
		return x.ExtraPluginRuns
	}
	return 0
}

type PluginRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration        Duration   `protobuf:"varint,1,opt,name=duration,proto3,enum=dashboard.Duration" json:"duration,omitempty"`
	CustomDateRange *DateRange `protobuf:"bytes,2,opt,name=customDateRange,proto3,oneof" json:"customDateRange,omitempty"`
}

func (x *PluginRunRequest) Reset() {
	*x = PluginRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginRunRequest) ProtoMessage() {}

func (x *PluginRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginRunRequest.ProtoReflect.Descriptor instead.
func (*PluginRunRequest) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard_proto_rawDescGZIP(), []int{6}
}

func (x *PluginRunRequest) GetDuration() Duration {
	if x != nil {
		return x.Duration
	}
	return Duration_LAST_DAY
}

func (x *PluginRunRequest) GetCustomDateRange() *DateRange {
	if x != nil {
		return x.CustomDateRange
	}
	return nil
}

type PluginRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Runs int32 `protobuf:"varint,1,opt,name=runs,proto3" json:"runs,omitempty"`
}

func (x *PluginRunResponse) Reset() {
	*x = PluginRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginRunResponse) ProtoMessage() {}

func (x *PluginRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginRunResponse.ProtoReflect.Descriptor instead.
func (*PluginRunResponse) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard_proto_rawDescGZIP(), []int{7}
}

func (x *PluginRunResponse) GetRuns() int32 {
	if x != nil {
		return x.Runs
	}
	return 0
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard_proto_rawDescGZIP(), []int{8}
}

type WorkflowIOResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workflows []*WorkflowIORecord `protobuf:"bytes,1,rep,name=workflows,proto3" json:"workflows,omitempty"`
}

func (x *WorkflowIOResponse) Reset() {
	*x = WorkflowIOResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowIOResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowIOResponse) ProtoMessage() {}

func (x *WorkflowIOResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowIOResponse.ProtoReflect.Descriptor instead.
func (*WorkflowIOResponse) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard_proto_rawDescGZIP(), []int{9}
}

func (x *WorkflowIOResponse) GetWorkflows() []*WorkflowIORecord {
	if x != nil {
		return x.Workflows
	}
	return nil
}

type WorkflowIORecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            IOStatus                `protobuf:"varint,1,opt,name=status,proto3,enum=dashboard.IOStatus" json:"status,omitempty"`
	WorkflowId        string                  `protobuf:"bytes,2,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	WorkflowName      string                  `protobuf:"bytes,3,opt,name=workflowName,proto3" json:"workflowName,omitempty"`
	VersionId         string                  `protobuf:"bytes,4,opt,name=versionId,proto3" json:"versionId,omitempty"`
	VersionName       string                  `protobuf:"bytes,5,opt,name=versionName,proto3" json:"versionName,omitempty"`
	ClientId          string                  `protobuf:"bytes,6,opt,name=clientId,proto3" json:"clientId,omitempty"`
	VersionStatus     workflow.WorkflowStatus `protobuf:"varint,7,opt,name=versionStatus,proto3,enum=workflow.WorkflowStatus" json:"versionStatus,omitempty"`
	Nodes             []*NodeListView         `protobuf:"bytes,8,rep,name=nodes,proto3" json:"nodes,omitempty"`
	VersionLastUpdate *timestamppb.Timestamp  `protobuf:"bytes,9,opt,name=versionLastUpdate,proto3" json:"versionLastUpdate,omitempty"`
	Received          int32                   `protobuf:"varint,10,opt,name=received,proto3" json:"received,omitempty"`
	Queued            int32                   `protobuf:"varint,11,opt,name=queued,proto3" json:"queued,omitempty"`
	Sent              int32                   `protobuf:"varint,12,opt,name=sent,proto3" json:"sent,omitempty"`
	Error             int32                   `protobuf:"varint,13,opt,name=error,proto3" json:"error,omitempty"`
	Workflows         []*WorkflowIORecord     `protobuf:"bytes,14,rep,name=workflows,proto3" json:"workflows,omitempty"`
	OrgName           *string                 `protobuf:"bytes,15,opt,name=orgName,proto3,oneof" json:"orgName,omitempty"`
}

func (x *WorkflowIORecord) Reset() {
	*x = WorkflowIORecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowIORecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowIORecord) ProtoMessage() {}

func (x *WorkflowIORecord) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowIORecord.ProtoReflect.Descriptor instead.
func (*WorkflowIORecord) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard_proto_rawDescGZIP(), []int{10}
}

func (x *WorkflowIORecord) GetStatus() IOStatus {
	if x != nil {
		return x.Status
	}
	return IOStatus_UNKNOWN
}

func (x *WorkflowIORecord) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *WorkflowIORecord) GetWorkflowName() string {
	if x != nil {
		return x.WorkflowName
	}
	return ""
}

func (x *WorkflowIORecord) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *WorkflowIORecord) GetVersionName() string {
	if x != nil {
		return x.VersionName
	}
	return ""
}

func (x *WorkflowIORecord) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *WorkflowIORecord) GetVersionStatus() workflow.WorkflowStatus {
	if x != nil {
		return x.VersionStatus
	}
	return workflow.WorkflowStatus(0)
}

func (x *WorkflowIORecord) GetNodes() []*NodeListView {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *WorkflowIORecord) GetVersionLastUpdate() *timestamppb.Timestamp {
	if x != nil {
		return x.VersionLastUpdate
	}
	return nil
}

func (x *WorkflowIORecord) GetReceived() int32 {
	if x != nil {
		return x.Received
	}
	return 0
}

func (x *WorkflowIORecord) GetQueued() int32 {
	if x != nil {
		return x.Queued
	}
	return 0
}

func (x *WorkflowIORecord) GetSent() int32 {
	if x != nil {
		return x.Sent
	}
	return 0
}

func (x *WorkflowIORecord) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *WorkflowIORecord) GetWorkflows() []*WorkflowIORecord {
	if x != nil {
		return x.Workflows
	}
	return nil
}

func (x *WorkflowIORecord) GetOrgName() string {
	if x != nil && x.OrgName != nil {
		return *x.OrgName
	}
	return ""
}

type NodeListView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Label          string                 `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	PluginType     string                 `protobuf:"bytes,3,opt,name=pluginType,proto3" json:"pluginType,omitempty"`
	ConnectionId   string                 `protobuf:"bytes,4,opt,name=connectionId,proto3" json:"connectionId,omitempty"`
	ConnectionName string                 `protobuf:"bytes,5,opt,name=connectionName,proto3" json:"connectionName,omitempty"`
	NodeLastUpdate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=nodeLastUpdate,proto3" json:"nodeLastUpdate,omitempty"`
	Received       int32                  `protobuf:"varint,7,opt,name=received,proto3" json:"received,omitempty"`
	Queued         int32                  `protobuf:"varint,8,opt,name=queued,proto3" json:"queued,omitempty"`
	Sent           int32                  `protobuf:"varint,9,opt,name=sent,proto3" json:"sent,omitempty"`
	Error          int32                  `protobuf:"varint,10,opt,name=error,proto3" json:"error,omitempty"`
	NodeType       string                 `protobuf:"bytes,11,opt,name=nodeType,proto3" json:"nodeType,omitempty"`
}

func (x *NodeListView) Reset() {
	*x = NodeListView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeListView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeListView) ProtoMessage() {}

func (x *NodeListView) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeListView.ProtoReflect.Descriptor instead.
func (*NodeListView) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard_proto_rawDescGZIP(), []int{11}
}

func (x *NodeListView) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeListView) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *NodeListView) GetPluginType() string {
	if x != nil {
		return x.PluginType
	}
	return ""
}

func (x *NodeListView) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *NodeListView) GetConnectionName() string {
	if x != nil {
		return x.ConnectionName
	}
	return ""
}

func (x *NodeListView) GetNodeLastUpdate() *timestamppb.Timestamp {
	if x != nil {
		return x.NodeLastUpdate
	}
	return nil
}

func (x *NodeListView) GetReceived() int32 {
	if x != nil {
		return x.Received
	}
	return 0
}

func (x *NodeListView) GetQueued() int32 {
	if x != nil {
		return x.Queued
	}
	return 0
}

func (x *NodeListView) GetSent() int32 {
	if x != nil {
		return x.Sent
	}
	return 0
}

func (x *NodeListView) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *NodeListView) GetNodeType() string {
	if x != nil {
		return x.NodeType
	}
	return ""
}

type RunStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRuns     int32 `protobuf:"varint,1,opt,name=totalRuns,proto3" json:"totalRuns,omitempty"`
	RemainingRuns int32 `protobuf:"varint,2,opt,name=remainingRuns,proto3" json:"remainingRuns,omitempty"`
	UsedRuns      int32 `protobuf:"varint,3,opt,name=usedRuns,proto3" json:"usedRuns,omitempty"`
	ExtraRuns     int32 `protobuf:"varint,4,opt,name=extraRuns,proto3" json:"extraRuns,omitempty"`
	IsPremium     bool  `protobuf:"varint,5,opt,name=isPremium,proto3" json:"isPremium,omitempty"`
}

func (x *RunStatsResponse) Reset() {
	*x = RunStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dashboard_dashboard_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunStatsResponse) ProtoMessage() {}

func (x *RunStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dashboard_dashboard_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunStatsResponse.ProtoReflect.Descriptor instead.
func (*RunStatsResponse) Descriptor() ([]byte, []int) {
	return file_dashboard_dashboard_proto_rawDescGZIP(), []int{12}
}

func (x *RunStatsResponse) GetTotalRuns() int32 {
	if x != nil {
		return x.TotalRuns
	}
	return 0
}

func (x *RunStatsResponse) GetRemainingRuns() int32 {
	if x != nil {
		return x.RemainingRuns
	}
	return 0
}

func (x *RunStatsResponse) GetUsedRuns() int32 {
	if x != nil {
		return x.UsedRuns
	}
	return 0
}

func (x *RunStatsResponse) GetExtraRuns() int32 {
	if x != nil {
		return x.ExtraRuns
	}
	return 0
}

func (x *RunStatsResponse) GetIsPremium() bool {
	if x != nil {
		return x.IsPremium
	}
	return false
}

var File_dashboard_dashboard_proto protoreflect.FileDescriptor

var file_dashboard_dashboard_proto_rawDesc = []byte{
	0x0a, 0x19, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x74, 0x61, 0x67, 0x2f,
	0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x01, 0x0a,
	0x10, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x7b, 0x0a, 0x09, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbd, 0x05, 0x0a, 0x11, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x75, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x2e, 0x0a, 0x12,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x4a, 0x0a, 0x15,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x52, 0x75, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x52, 0x15, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x5e, 0x0a, 0x10, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x75, 0x6e, 0x73, 0x50, 0x65, 0x72,
	0x44, 0x61, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x75,
	0x6e, 0x73, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x75, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x12,
	0x30, 0x0a, 0x13, 0x61, 0x76, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x75, 0x6e, 0x73,
	0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x61, 0x76,
	0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x75, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x44, 0x61,
	0x79, 0x12, 0x6d, 0x0a, 0x15, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x75, 0x6e, 0x73, 0x50,
	0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x75, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x52, 0x75, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x1a, 0x43, 0x0a, 0x15, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x75, 0x6e, 0x73, 0x50, 0x65,
	0x72, 0x44, 0x61, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x61, 0x0a, 0x1a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52,
	0x75, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x45, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x75, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x3e, 0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x75, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x22,
	0x90, 0x01, 0x0a, 0x16, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x75, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x75,
	0x6e, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x10, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0x27, 0x0a, 0x11, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x4f, 0x0a, 0x12, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49,
	0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x49, 0x4f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x22, 0xdc, 0x04, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x49, 0x4f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x49, 0x4f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x39, 0x0a,
	0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x4f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x09, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x72, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x72, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x69, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x10, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x75, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x52, 0x75, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65,
	0x6d, 0x69, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72,
	0x65, 0x6d, 0x69, 0x75, 0x6d, 0x2a, 0x55, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x33, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x04, 0x2a, 0x31, 0x0a, 0x08,
	0x49, 0x4f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x02, 0x32,
	0xaf, 0x02, 0x0a, 0x09, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x49, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1b, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x75, 0x6e, 0x42, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x10, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x52,
	0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x40, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x4f,
	0x12, 0x10, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x19, 0x5a, 0x17, 0x77, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dashboard_dashboard_proto_rawDescOnce sync.Once
	file_dashboard_dashboard_proto_rawDescData = file_dashboard_dashboard_proto_rawDesc
)

func file_dashboard_dashboard_proto_rawDescGZIP() []byte {
	file_dashboard_dashboard_proto_rawDescOnce.Do(func() {
		file_dashboard_dashboard_proto_rawDescData = protoimpl.X.CompressGZIP(file_dashboard_dashboard_proto_rawDescData)
	})
	return file_dashboard_dashboard_proto_rawDescData
}

var file_dashboard_dashboard_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dashboard_dashboard_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_dashboard_dashboard_proto_goTypes = []interface{}{
	(Duration)(0),                  // 0: dashboard.Duration
	(IOStatus)(0),                  // 1: dashboard.IOStatus
	(*AnalyticsRequest)(nil),       // 2: dashboard.AnalyticsRequest
	(*DateRange)(nil),              // 3: dashboard.DateRange
	(*AnalyticsResponse)(nil),      // 4: dashboard.AnalyticsResponse
	(*WorkflowRuns)(nil),           // 5: dashboard.WorkflowRuns
	(*RunsPerVersion)(nil),         // 6: dashboard.RunsPerVersion
	(*PluginUsageReservation)(nil), // 7: dashboard.PluginUsageReservation
	(*PluginRunRequest)(nil),       // 8: dashboard.PluginRunRequest
	(*PluginRunResponse)(nil),      // 9: dashboard.PluginRunResponse
	(*Empty)(nil),                  // 10: dashboard.Empty
	(*WorkflowIOResponse)(nil),     // 11: dashboard.WorkflowIOResponse
	(*WorkflowIORecord)(nil),       // 12: dashboard.WorkflowIORecord
	(*NodeListView)(nil),           // 13: dashboard.nodeListView
	(*RunStatsResponse)(nil),       // 14: dashboard.RunStatsResponse
	nil,                            // 15: dashboard.AnalyticsResponse.PluginRunsPerDayEntry
	nil,                            // 16: dashboard.AnalyticsResponse.PluginRunsPerWorkflowEntry
	(*timestamppb.Timestamp)(nil),  // 17: google.protobuf.Timestamp
	(*monitoring.QueryRes)(nil),    // 18: monitoring.QueryRes
	(workflow.WorkflowStatus)(0),   // 19: workflow.WorkflowStatus
}
var file_dashboard_dashboard_proto_depIdxs = []int32{
	0,  // 0: dashboard.AnalyticsRequest.duration:type_name -> dashboard.Duration
	3,  // 1: dashboard.AnalyticsRequest.customDateRange:type_name -> dashboard.DateRange
	17, // 2: dashboard.DateRange.startTime:type_name -> google.protobuf.Timestamp
	17, // 3: dashboard.DateRange.endTime:type_name -> google.protobuf.Timestamp
	18, // 4: dashboard.AnalyticsResponse.publishedWorkflowRuns:type_name -> monitoring.QueryRes
	7,  // 5: dashboard.AnalyticsResponse.reservations:type_name -> dashboard.PluginUsageReservation
	15, // 6: dashboard.AnalyticsResponse.pluginRunsPerDay:type_name -> dashboard.AnalyticsResponse.PluginRunsPerDayEntry
	16, // 7: dashboard.AnalyticsResponse.pluginRunsPerWorkflow:type_name -> dashboard.AnalyticsResponse.PluginRunsPerWorkflowEntry
	6,  // 8: dashboard.WorkflowRuns.versions:type_name -> dashboard.RunsPerVersion
	0,  // 9: dashboard.PluginRunRequest.duration:type_name -> dashboard.Duration
	3,  // 10: dashboard.PluginRunRequest.customDateRange:type_name -> dashboard.DateRange
	12, // 11: dashboard.WorkflowIOResponse.workflows:type_name -> dashboard.WorkflowIORecord
	1,  // 12: dashboard.WorkflowIORecord.status:type_name -> dashboard.IOStatus
	19, // 13: dashboard.WorkflowIORecord.versionStatus:type_name -> workflow.WorkflowStatus
	13, // 14: dashboard.WorkflowIORecord.nodes:type_name -> dashboard.nodeListView
	17, // 15: dashboard.WorkflowIORecord.versionLastUpdate:type_name -> google.protobuf.Timestamp
	12, // 16: dashboard.WorkflowIORecord.workflows:type_name -> dashboard.WorkflowIORecord
	17, // 17: dashboard.nodeListView.nodeLastUpdate:type_name -> google.protobuf.Timestamp
	5,  // 18: dashboard.AnalyticsResponse.PluginRunsPerWorkflowEntry.value:type_name -> dashboard.WorkflowRuns
	2,  // 19: dashboard.Analytics.GetAnalytics:input_type -> dashboard.AnalyticsRequest
	8,  // 20: dashboard.Analytics.GetPluginRunByDuration:input_type -> dashboard.PluginRunRequest
	10, // 21: dashboard.Analytics.GetUserRunStats:input_type -> dashboard.Empty
	10, // 22: dashboard.Analytics.GetWorkflowIO:input_type -> dashboard.Empty
	4,  // 23: dashboard.Analytics.GetAnalytics:output_type -> dashboard.AnalyticsResponse
	9,  // 24: dashboard.Analytics.GetPluginRunByDuration:output_type -> dashboard.PluginRunResponse
	14, // 25: dashboard.Analytics.GetUserRunStats:output_type -> dashboard.RunStatsResponse
	11, // 26: dashboard.Analytics.GetWorkflowIO:output_type -> dashboard.WorkflowIOResponse
	23, // [23:27] is the sub-list for method output_type
	19, // [19:23] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_dashboard_dashboard_proto_init() }
func file_dashboard_dashboard_proto_init() {
	if File_dashboard_dashboard_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dashboard_dashboard_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowRuns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunsPerVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginUsageReservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowIOResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowIORecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeListView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dashboard_dashboard_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dashboard_dashboard_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dashboard_dashboard_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_dashboard_dashboard_proto_msgTypes[10].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dashboard_dashboard_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dashboard_dashboard_proto_goTypes,
		DependencyIndexes: file_dashboard_dashboard_proto_depIdxs,
		EnumInfos:         file_dashboard_dashboard_proto_enumTypes,
		MessageInfos:      file_dashboard_dashboard_proto_msgTypes,
	}.Build()
	File_dashboard_dashboard_proto = out.File
	file_dashboard_dashboard_proto_rawDesc = nil
	file_dashboard_dashboard_proto_goTypes = nil
	file_dashboard_dashboard_proto_depIdxs = nil
}
