// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: dashboard/dashboard.proto

package dashboard

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnalyticsClient is the client API for Analytics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyticsClient interface {
	GetAnalytics(ctx context.Context, in *AnalyticsRequest, opts ...grpc.CallOption) (*AnalyticsResponse, error)
	GetPluginRunByDuration(ctx context.Context, in *PluginRunRequest, opts ...grpc.CallOption) (*PluginRunResponse, error)
	GetUserRunStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RunStatsResponse, error)
	GetWorkflowIO(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WorkflowIOResponse, error)
}

type analyticsClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsClient(cc grpc.ClientConnInterface) AnalyticsClient {
	return &analyticsClient{cc}
}

func (c *analyticsClient) GetAnalytics(ctx context.Context, in *AnalyticsRequest, opts ...grpc.CallOption) (*AnalyticsResponse, error) {
	out := new(AnalyticsResponse)
	err := c.cc.Invoke(ctx, "/dashboard.Analytics/GetAnalytics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsClient) GetPluginRunByDuration(ctx context.Context, in *PluginRunRequest, opts ...grpc.CallOption) (*PluginRunResponse, error) {
	out := new(PluginRunResponse)
	err := c.cc.Invoke(ctx, "/dashboard.Analytics/GetPluginRunByDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsClient) GetUserRunStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RunStatsResponse, error) {
	out := new(RunStatsResponse)
	err := c.cc.Invoke(ctx, "/dashboard.Analytics/GetUserRunStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsClient) GetWorkflowIO(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WorkflowIOResponse, error) {
	out := new(WorkflowIOResponse)
	err := c.cc.Invoke(ctx, "/dashboard.Analytics/GetWorkflowIO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsServer is the server API for Analytics service.
// All implementations must embed UnimplementedAnalyticsServer
// for forward compatibility
type AnalyticsServer interface {
	GetAnalytics(context.Context, *AnalyticsRequest) (*AnalyticsResponse, error)
	GetPluginRunByDuration(context.Context, *PluginRunRequest) (*PluginRunResponse, error)
	GetUserRunStats(context.Context, *Empty) (*RunStatsResponse, error)
	GetWorkflowIO(context.Context, *Empty) (*WorkflowIOResponse, error)
	mustEmbedUnimplementedAnalyticsServer()
}

// UnimplementedAnalyticsServer must be embedded to have forward compatible implementations.
type UnimplementedAnalyticsServer struct {
}

func (UnimplementedAnalyticsServer) GetAnalytics(context.Context, *AnalyticsRequest) (*AnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalytics not implemented")
}
func (UnimplementedAnalyticsServer) GetPluginRunByDuration(context.Context, *PluginRunRequest) (*PluginRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPluginRunByDuration not implemented")
}
func (UnimplementedAnalyticsServer) GetUserRunStats(context.Context, *Empty) (*RunStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRunStats not implemented")
}
func (UnimplementedAnalyticsServer) GetWorkflowIO(context.Context, *Empty) (*WorkflowIOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowIO not implemented")
}
func (UnimplementedAnalyticsServer) mustEmbedUnimplementedAnalyticsServer() {}

// UnsafeAnalyticsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsServer will
// result in compilation errors.
type UnsafeAnalyticsServer interface {
	mustEmbedUnimplementedAnalyticsServer()
}

func RegisterAnalyticsServer(s grpc.ServiceRegistrar, srv AnalyticsServer) {
	s.RegisterService(&Analytics_ServiceDesc, srv)
}

func _Analytics_GetAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServer).GetAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.Analytics/GetAnalytics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServer).GetAnalytics(ctx, req.(*AnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analytics_GetPluginRunByDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServer).GetPluginRunByDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.Analytics/GetPluginRunByDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServer).GetPluginRunByDuration(ctx, req.(*PluginRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analytics_GetUserRunStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServer).GetUserRunStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.Analytics/GetUserRunStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServer).GetUserRunStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analytics_GetWorkflowIO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServer).GetWorkflowIO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dashboard.Analytics/GetWorkflowIO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServer).GetWorkflowIO(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Analytics_ServiceDesc is the grpc.ServiceDesc for Analytics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Analytics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dashboard.Analytics",
	HandlerType: (*AnalyticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAnalytics",
			Handler:    _Analytics_GetAnalytics_Handler,
		},
		{
			MethodName: "GetPluginRunByDuration",
			Handler:    _Analytics_GetPluginRunByDuration_Handler,
		},
		{
			MethodName: "GetUserRunStats",
			Handler:    _Analytics_GetUserRunStats_Handler,
		},
		{
			MethodName: "GetWorkflowIO",
			Handler:    _Analytics_GetWorkflowIO_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dashboard/dashboard.proto",
}
